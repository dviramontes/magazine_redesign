%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: MSUDenver_Formal_2CRev_BlueRed_WhBkgd_FormatC_PAN.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: M'Gonigle, Ruth
%%CreationDate: 7/9/12
%%BoundingBox: 0 0 792 612
%%HiResBoundingBox: 0 0 792 612
%%CropBox: 0 0 792 612
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 100 8%%BeginData: 7358 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDCCFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFF2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F%0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F%0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F%0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F%0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D2F0D0607060606070606060706%060607060606070606060706060607060606070606060706060607060606%070606060706060607060606070606060706060607060606070606060706%060607060606070606060706060607060606070606060706060607060606%0706060607060606070606060706060607060606070606060706060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060DFD04060D0606060D0606060DFD05060D060D0606060D0606060D%0606060D0606060D0606060D0606060D0606060D0606060D0606060D0606%060D0606060D0606060D0606060D0606060D060606070606060D0606060D%0606060D0606060D0606060D0606060D0606060D0606060D0606060D0606%060D0606060D0606060D0D060D060D060D060D060D0D530D2F0D2F2F532F%2F0D0D060D060D060D060D060D060D060D060D060D060D060D060D060D06%0D060D060D060D060D060D060D060D060D060D060D060D060D060D060D06%0D060D060D060D060D060D060D060D060D060D060D060D060D060D060D06%0D060D060D060D060D060D060D060D060DFD04060D06060607062F062F06%2F2F592F597E7E2F2F060D0606060D0606060D062F530D06532F0D060D06%0D0607060D0606060D0607060D0606060D060D060D060D060D0606060D06%06060D060D5359060D060D060D060D060D060D06530C0D532F0607060D06%0D0606060D060D060D0606060D060D060D060D060D0607060D0D060D060D%06FD042F0D060D060D2F0D2F5A2F5A532F2F0D060D060D060D060D2FFF2F%0DFF53537E2F5A7E5A537E532F2F5A53592F7E532F5959592F592F067E2F%7E7E2F2F5A0684590D2F0D53A82F5A5A592F5A2F7E5A5A5959060D7E5A06%842F842F2F2F5A537E0659597E2F5A595A2F840D595A5A7E5A7E2F2F5A7E%0D06060DFD050653060D062F53A2A8FF7EA853592E0D060D062F060DFD05%060D7E7E2F842F597E2F067E062F595A2EA806067E2F53597E7E062F595A%0606530D2F59067E84062FA9532F060D7E5A065A0659A80D2F59067E530D%067E2F0653535384530D530D59530D597D0D2F7E590D7E2F2F59067E062F%7E2F060D06060D060D060D0D2F2F7D76C39AC39AC3CAFFFF59537E060D06%5AFD052F0D060D2F5A847E5A5959842F0D842F2F847E597E2F0DA82F8406%597E0D597E5A2F0D84065A592F598453590DFF530D0D2FA92F7E2F598459%5A530D7E59060D595A06A82F530DFF0D7E065AA90D59840D7E7E840D5A7E%5A530D842F06A9060D060D06060D060D537D769A93948D9493C3A0C3CAFF%8459060D062F2F592F2F060D0D2F062F2F2F0653FD042F0653062F2F0D2F%2F2F59062F2F06062F2F5306532F2F2F0D0D2F2E0D06592F0D062F062F53%2F06532F0D06592F2F06592F0D060D2F592F0D2F062F2F2F0D065306FD06%2F59532F2F2F0659060D2F0D060D06060D060D7D7752A19ABC93948D949A%C3A1A87E7E2F0D06FD082F7E2F530606060D060D0606060D060D060D0606%060D0606060D060D060D060D060D0607060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D0607%060D060D060D060D060D060D060D060D060DFD04060D06534C779A9A9494%70532F2F0D2F537EA85A060D060D060D0C2F280D060D532F0659060D2F53%0659062F062F06FD052F06070606060D0606060D0606060D0606060D0606%060D0606060D0606060D0606060D0606060D060606070606060D0606060D%0606060D0606060D0606060D0606060D0606060D0606060D0D060D060D06%0D77530DA2532F0D2F2F2F0D597EFF2F2F0D0D062F060D060D060D59A97E%5A7E0D077E597EA82FA88453A92FA92FA97E0D060D060D060D060D060D06%0D060D060D060D060D060D060D060D060D060D060D060D060D060D060D06%0D060D060D060D060D060D060D060D060D060D060D060D060D060D060D06%0DFD04060D0606060D0606060D060D060D062F0653592F06070606060D06%06060D062F7E592F2F060D53592F7E2F532F0D530D592F5353060D060606%0D0606060D0606060D0606060D0606060D0606060D0606060D0606060D06%06060D0606060D0606060D0606060D0606060D0606060D0606060D060606%0D0606060D0606060D0D060D060D060D060D060D060D060D060D062F2F5A%2F0D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D06060D0606060D0606060D060606%0D0606060706072F2F0606060D0606060D0606060D0606060D0606060706%0606070606060D060606070606060D0606060D0606060D0606060D060606%0D0606060D0606060D0606060D0606060D0606060D0606060D0606060D06%06060D0606060D0606060D0606060D0606060D0606060D06060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D06060D0606060D0606060D0606060D0606060D0606060D0606060D06%06060D0606060D0606060D0606060D0606060D0606060D0606060D060606%0D0606060D0606060D0606060D0606060D0606060D0606060D0606060D06%06060D0606060D0606060D0606060D0606060D0606060D0606060D060606%0D0606060D0606060D06060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D060D060D060D060D060D060D%060D060D060D060D060D060D060D060D060D06060D062F060D062F060D06%2F060D062F060D062F060D062F060D062F060D062F060D062F060D062F06%0D062F060D062F060D062F060D062F060D062F060D062F060D062F060D06%2F060D062F060D062F060D062F060D062F060D062F060D062F060D062F06%0D062F060D062F060D062F060D062F060D062F060D062F060D062FFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD4FFF%FF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE 193 C)
%%+ (PANTONE 295 C)
%%CMYKCustomColor: 0 1 0.6600 0.1300 (PANTONE 193 C)
%%+ 1 0.5700 0 0.4000 (PANTONE 295 C)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">MSUD_Dept_00GeneralUse_2CPos_FormatC_PAN</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2012-07-09T17:18:58-06:00</xmp:MetadataDate>
         <xmp:ModifyDate>2012-07-09T17:18:58-06:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-07-09T17:18:58-06:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FX59fXLv/f8AJ/wTf1zqqDynEXfXLv8A3/J/wTf1xoLxF31y7/3/ACf8&#xA;E39caC8Rd9cu/wDf8n/BN/XGgvEXfXLv/f8AJ/wTf1xoLxF31y7/AN/yf8E39caC8Rd9cu/9/wAn&#xA;/BN/XGgvEXfXLv8A3/J/wTf1xoLxF31y7/3/ACf8E39caC8Rd9cu/wDf8n/BN/XGgvEXfXLv/f8A&#xA;J/wTf1xoLxF31y7/AN/yf8E39caC8Rd9cu/9/wAn/BN/XGgvEXfXLv8A3/J/wTf1xoLxF31y7/3/&#xA;ACf8E39caC8Rd9cu/wDf8n/BN/XGgvEXfXLv/f8AJ/wTf1xoLxF31y7/AN/yf8E39caC8Rd9cu/9&#xA;/wAn/BN/XGgvEXfXLv8A3/J/wTf1xoLxF31y7/3/ACf8E39caC8Rd9cu/wDf8n/BN/XGgvEXfXLv&#xA;/f8AJ/wTf1xoLxF31y7/AN/yf8E39caC8Rd9cu/9/wAn/BN/XGgvEXfXLv8A3/J/wTf1xoLxF31y&#xA;7/3/ACf8E39caC8Rd9cu/wDf8n/BN/XGgvEXfXLv/f8AJ/wTf1xoLxF31y7/AN/yf8E39caC8Rd9&#xA;cu/9/wAn/BN/XGgvEXfXLv8A3/J/wTf1xoLxFSwsUXpemTajc/VoHVZiKxowcs5qBwRUV2ZjXYAY&#xA;JSoM4Q4jSZWltZrc2iWMMmp38bBhHZ+rUspBBKyQktU9lA+nrkCTW+wZxAsV6j5f2Mw0D8r/AMxt&#xA;QYzT+Urh2O/qTG0sj4fGt1E3I/7GvfKJ6nGP4vvP3ORj0+Q84/cPvTZNFu9KsTHr+giCZ1b6hHFq&#xA;91a6hxQkM0cBa7DR0Umpt0H0UyvjEj6T9gr9H3togYj1D3eo3+n7gwHX7fRpZEEV7I1yQRzugnqK&#xA;w2EUskTSRSptRZgQQfhZQtCuVAnucPII9/4/HVIbnT761ANxbyRKxorOpCnv8LdD9GWAgtUokcwo&#xA;YWLNPKHknTPMXlPXrpJpk8wadxk062DKYrlFjeaaPhw5+osULstH36UzHy5TGQH8JcrDgE4SP8QR&#xA;UP5c2Muh+WWa5mi1rXtUXTp1biYbdZo4ZICY6B2ZkuUcnnsDSlcBznil3RF/j5Mvyw4Y7+qRpRt/&#xA;y3gk8zWPl+e/ubK91J1js1ubExs1ZZYjIR620XKHZqkmv2cJz+kyq680DTDiEb3Pko6D5CsNcgae&#xA;w1OdoheW1iGNmTwa6ikk9SbjK3COL0H9RhyoKHfehnmMeY6XzRj04lyPWuSBbylaWWl2epaxqP1a&#xA;DUpZ4rD6tD9ZLpbP6Uk7VeELHzqFI5MaH4cl4hJIA5MPBAAMjz+KcW35U3Zv7vTru8aO9ttSttLU&#xA;QW7Txub2J5oLjlyRxCY4izHgSAQaHelZ1IqwOl/JsGlNkE73XLvS2TyVaWQ0yLV9UFpd6wvq2SRQ&#xA;meJYTM0CSzy84yqu8bEcFc8d6dsn4pN0OTDwQKEjuUL5g8oXOhWEc17LS8N/e6bNaqoISSw9L1GE&#xA;nL4g3rrx+Hx+kwyiR27gfmxyYeAb87I+SaReQdMfVL/TTrEgnsLOXUHC2lawQWi3bdZlHIqxVRXq&#xA;N6CmQOY0DXM19tNn5cWRfIXy8r70sl8oSHy3eeYLO6W5srS6SD0yhjlMElQLkoSaJ6lIz1+I0rk/&#xA;F9QiWBw+kyB2B/BTHUPy3ntLe0v0vlu9Iu7WaY3sEZYw3EFs1y1pOhYenIUX4d6EbioyMc92K3/A&#xA;tnLTVRvav0XTfkzyno+seX9TvnWa+1OwkQvpltMkUq2RRvUukRo5Gn9N+PJFpQfMEDLlMZAcgevn&#xA;3LhxRlEnmR08u/zQk/lHSzb6e9lqkk8+qlhYJLaiFG4XHoOZHE0nAAVepX7I3pkhkO9jkxOEUKPP&#xA;lsiz+X9nDqesabdaqyz6TDNeFobYSJNZxqjxTIzSx/3yShlXw6nB4xoEDn97L8uLIJ+n7kPd+SYY&#xA;vLp122urm5sisrpcLZkQBY7j6uoll9U8GkYrxHE9fpwjL6uH9KDgHDxA7e7zpD3Xl/TYvy/sNfQz&#xA;fpC61G4spFLqYRHBFHICqcA3ImX+ft0wiZ8Qx6UxOMeGJdbpkF3+WFpe6jcWeh3TRXCWWn3NnZXr&#xA;q8l1PfWhu2gjlRIlDhVbgCvxU61OVDUEC5d5+FGm46UEkRPQc+ti0ih8n2xtr+a4vZYDplna3t3G&#xA;1vVh9YuI7d4wDIN42mU70rv0pvYcvLbmWrwRRs8gDy70aPy4kXzO+hz3wRHvLKysb1YgyTtqJBgk&#xA;VeYIQxVcnenQ7nI+P6eKuh+xl+W9XCT1A+a9Py3LalqFk095E+n2Lag8UljxuJES5W24xQ+t8XIu&#xA;GU8txj4+wO25rn5Wn8tuRZ2F8vOu9qb8tnt18wtJf+sdA9H1I7SEzSETxmTnNGXjaJIiPTlb4uD7&#xA;UpviM98O31fj+xB01cW/0qemeRNOvb7SrBtWkju9WtUu4FFqGVQVlZwzesv2fRpXvXphlmIBNclj&#xA;pwSBe5F8lGHyXp15pL6vp2qtcWFpIE1ZntxFJao0XOORkMpVhI4MS0bdxTutScpBojfp5oGGJHED&#xA;t125fjkk2qafpFtaWk1lqqX886Brm2WGaJoG4glWaRQr7njVT2PalbIyJJsU1SjEAUbQ+lw6fNfx&#xA;R6hO1tZmplmRS7ABSQABX7RoK0260OMiQNtyjGAZASNBnWjWHl6S1VoS0NpK3pLJJGn79lIBCcpo&#xA;+RJp8E/w1+yO2afU5s4Ndf6IMvntX6Xrey9LoSOKQMo985jHE+6MeKcvu9yLvJPMNqxhs3uI9NT4&#xA;pre1ZRADUKOaWfpwq1WA48uVdjvmknOUvqNvo2j02kxxAhGECeXpo/7L1fGmUeXdfsdKnie7+rWU&#xA;/IUM/wBWS6DJ4wQ2t/qNf5eTiuW4tHlkNo/H+10PanaelhcZZOI/zY8Uv99GH+xZN5y826P500+1&#xA;gs9K1K71SzZ1DR2TNBIkyFJYGjkubGQrJRdx8QIBGbbT4p4/qMfn+wvDanJDJ9Akfh+0PFPNGi6p&#xA;pnmBJvN6XlhezrG9vGbaK55RQhYo1/eXBDBVjC/EW6b1zZ45iUfRR/HudVlgYyudg+79qpPfoUMg&#xA;g1KOTi1Z4LG0tKjotTCnKn+yxA93zLInyl8gEDLZ6abSZ7u+gd41qIZo+NwS1BX1YyHdq/zBgBuR&#xA;krN7BgYxrcj9KJ8uapr+mVuvK+nTXtppN7Bqk2pLBOzRmGNlMUrRsYlhIdxUqrMN/h+yI5IxO0jz&#xA;FLjnKO8BYBu1WXzj5u0620i9vtIRF/Sz+YdPv7mG5jFzcfu+XA+okTwjhHtGNtt99x4UCSAenCk5&#xA;piiR/Fxdd1S0n87WPnHStTtfKckOrwl72ysPqt+wnqxcyCN5GlZFLV+Bgv44DwGBBlt8Eg5BMER3&#xA;9xQfl3WvOOj262ekaW4mmvIdQhlEE7yl4TLZrGq8uDxM00kLKynkSVrXJZIQluT0r9LHHOcdgOt9&#xA;fd+xU/SWv32lgzeVku9G01nv7YLBeCC1huGPJfUSSv1eSSFj8bHcNxYfFjwxB+rc7dN/2p45EfTY&#xA;G/Xb9ih5l8web/Q1Cy1+wa1uNbuIdTkluIZreY+lHJDF6Skono8JWUfAfnthxwhsYnlsxy5J7iQ5&#xA;7oW2853KRaWt3Y2uoS6KOGmzXAl5JGJDKsbiN0WREkdmUMO9DVdsJxDejVsRmO1gHh5N3Pna8vbF&#xA;bXUrG01CRbm7vfrc/wBYEpuL7h6shEc0cZ3iUgFKbbg74jEAbBrkPkpzEiiAeZ+a7/HV+Nav9WWy&#xA;tFm1Cwk02aECf0liltxbM6VlL8/THdiK9sfBFAWdjf6U+OeIyobim7Lz9rVpbvZIkUmlSWJ059Lk&#xA;adrUo3xNL6fqikpk/ecgdm3A7YnCCb63drHUSArpVV+OqnbeedZtf0pHbiOK01i1FpeWahzEQsXp&#xA;JIodmYSKOjV7kdDTE4QavoozyF/0g15V85XPlmeO80+xtm1S3aZrXUZPVMsZnjER+FZFjYIoJQMp&#xA;3Y1r0xyYhPYnZGLNwbgC+9bbecdQtbSxht4IYptNgube0vEMyzr9aYs8nJZQvNeTKpC0oehNDhOI&#xA;EnzUZiAK6X9qLm/MXWrgFrqC3ubptLk0aW9l9Zp5IJG5CSRvV+KVPsqxFOOxBoMiMAHLvtkdRI8/&#xA;5tICTzO0miW2kyafautpFLDBdk3AmAmlMrEgTCJiGO1Y6fTvkvD3u2Hi+nhobLbHzLLBox0W6tIb&#xA;7Thc/XYopvUVo5igjcq8Txmjqqhga9BShwnHZvkVjkqPCRY5qup+cdV1GW6mnWJJrma1mikhDxm3&#xA;+oxtDbxwcWoqpG9Piqdga1qSI4gPt+1ZZpSv4fCkVqn5hazqkmrzX0NvPda3a21ne3JWRX42rRuJ&#xA;ECOqB5HgVnJUivQDIxwAVXRlLUSld/xD7lOPz5ra3HludxFM3lco2nrIrEO0cvqp63FlZuPFEFCP&#xA;hUDCcIqX9JHjy9P9Hkug893trNqE1lYWlpLqVtJaTPEbrkoknW4MkbPO5V1kjUrvxHhucThBqzy9&#xA;yRqCLIA39/60Wn5l6kmp3WsLptiutXkUsc+oos6OzTxtFNI0azCFmcNyIMfHl8VK1rH8uKqzTIak&#xA;3xUOLv8AwaQVn55vrTV9I1SKxtPW0a0FlBEwnMcicXXnL+95cz6pPwso9skcIIIvmxGciQND0ikB&#xA;pnmC50/StX0yKGF4dZiihuJJA5dFhmWdfT4uqgl0WvIHJSgCQe5hHIREjvSvJtbsVRFhqF3YXIub&#xA;RxHMFZAxVW2dSjCjBhurEZDJjExUuTbhzTxSE4GpDqioPMmtwC4C3Rc3XETvKqTOQgZVHOQOwFJG&#xA;2B/UMicENtvp5Ng1eUcXqPr5+fvUTq10QQY7ehFDS2tx+ITJ8IaeM+XyCP0jXEtLiN41S1ZDUKQ7&#xA;27HYfvAD6o8SQx8OOCULZwyUe78fNNvzC13UrrWzdktbG8hR41X4ONso9KCFOJK+kEjDDieLVrVt&#xA;jleGAEabNRkJlfew7L3FdirLfKn5h3Xl7SJNPSxjuWWaW6sp2kljMU89v9WdnWNgsq+n0V+h9iQa&#xA;MmASN25OHUGAqvxySPWNcutUFmsyIiWVvFawhFUErEipVmA5MTxr8R27ZbGADVPIZV5Mmj/NG5jv&#xA;RPHpkAhY3kk8DO8geW/jjjlf95yUDjCtFC/Ovan8uK5932N/5re67/tQh/MjWhoEGiQRRQwWgH1O&#xA;dRSaGQXz33ONxTjyZ1Vh0+BT1GHwBxcX45Ux/My4eEfje29Q/MW+1CPXY7mxt+GtG2KxxqFS2FpF&#xA;LDEsKEMFAWc9N/fc4xwAVR5fpWWpJ4rH1fZSB83+cbzzPPaTXUEdubSJ4USH4UKvM83Ir051kozf&#xA;tUBO9SZ4sQhdMM2Y5DZSDLGl2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kqv1O7/AN8S&#xA;f8C39MFhlwl31O7/AN8Sf8C39MbC8Jd9Tu/98Sf8C39MbC8Jd9Tu/wDfEn/At/TGwvCXfU7v/fEn&#xA;/At/TGwvCXfU7v8A3xJ/wLf0xsLwl31O7/3xJ/wLf0xsLwl31O7/AN8Sf8C39MbC8Jd9Tu/98Sf8&#xA;C39MbC8Jd9Tu/wDfEn/At/TGwvCXfU7v/fEn/At/TGwvCXfU7v8A3xJ/wLf0xsLwl31O7/3xJ/wL&#xA;f0xsLwl31O7/AN8Sf8C39MbC8Jd9Tu/98Sf8C39MbC8Jd9Tu/wDfEn/At/TGwvCXfU7v/fEn/At/&#xA;TGwvCXfU7v8A3xJ/wLf0xsLwl31O7/3xJ/wLf0xsLwl31O7/AN8Sf8C39MbC8Jd9Tu/98Sf8C39M&#xA;bC8Jd9Tu/wDfEn/At/TGwvCXfU7v/fEn/At/TGwvCXfU7v8A3xJ/wLf0xsLwl31O7/3xJ/wLf0xs&#xA;Lwl31O7/AN8Sf8C39MbC8Jd9Tu/98Sf8C39MbC8Jd9Tu/wDfEn/At/TGwvCXfU7v/fEn/At/TGwv&#xA;CXfU7v8A3xJ/wLf0xsLwl31O7/3xJ/wLf0xsLwl31O7/AN8Sf8C39MbC8JfoLnKvVuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:11411B855220681195FEA736D3337619</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:11411B855220681195FEA736D3337619</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:438ba3eb-2e9d-bd45-aeb4-6d581e0bb2a9</stRef:instanceID>
            <stRef:documentID>xmp.did:C42D5BFA0E206811822AA2A76640F5A5</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9B9235960F2068118083B6FB01DC43AC</stEvt:instanceID>
                  <stEvt:when>2012-05-16T20:06:56-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:01801174072068118083F6127FCB2F24</stEvt:instanceID>
                  <stEvt:when>2012-05-17T18:06:09-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083F6127FCB2F24</stEvt:instanceID>
                  <stEvt:when>2012-05-17T18:10:02-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811822AFF52A3D3524D</stEvt:instanceID>
                  <stEvt:when>2012-05-18T07:27:39-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:03801174072068118C14A7419EC00F2F</stEvt:instanceID>
                  <stEvt:when>2012-05-29T16:34:23-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6CCB09E025206811822AC86FA27CA56C</stEvt:instanceID>
                  <stEvt:when>2012-06-07T16:52:08-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6EED10502A206811822AC86FA27CA56C</stEvt:instanceID>
                  <stEvt:when>2012-06-07T17:11:41-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6FED10502A206811822AC86FA27CA56C</stEvt:instanceID>
                  <stEvt:when>2012-06-07T17:18:20-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:70ED10502A206811822AC86FA27CA56C</stEvt:instanceID>
                  <stEvt:when>2012-06-07T17:18:42-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:71ED10502A206811822AC86FA27CA56C</stEvt:instanceID>
                  <stEvt:when>2012-06-07T17:19:15-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:72ED10502A206811822AC86FA27CA56C</stEvt:instanceID>
                  <stEvt:when>2012-06-07T17:19:53-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:73ED10502A206811822AC86FA27CA56C</stEvt:instanceID>
                  <stEvt:when>2012-06-07T17:22:44-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C42D5BFA0E206811822AA2A76640F5A5</stEvt:instanceID>
                  <stEvt:when>2012-06-19T17:07:19-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:11411B855220681195FEA736D3337619</stEvt:instanceID>
                  <stEvt:when>2012-07-09T17:18:58-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>11.000000</stDim:w>
            <stDim:h>8.500000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE 295 C</rdf:li>
               <rdf:li>PANTONE 193 C</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 193 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>100.000000</xmpG:magenta>
                           <xmpG:yellow>66.000404</xmpG:yellow>
                           <xmpG:black>13.000500</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>PANTONE 295 C</xmpG:swatchName>
                           <xmpG:type>SPOT</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>57.000702</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>39.999397</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -612 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 612 li
792 612 li
792 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 248.853 mo
0 370.307 li
792 370.307 li
792 248.852 li
0 248.853 li
cp
false sop
/0 
<<
/Name (PANTONE 295 C)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 1 .570007 0 .399994 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
gsave
0 0 mo
792 0 li
792 612 li
0 612 li
0 0 li
cp
clp
774.857 285.77 mo
776.047 285.77 li
777.42 289.771 li
778.824 285.77 li
779.936 285.77 li
779.936 290.625 li
779.275 290.625 li
779.275 286.253 li
777.682 290.625 li
777.043 290.625 li
775.51 286.28 li
775.51 290.625 li
774.857 290.625 li
774.857 285.77 li
cp
770.842 289.207 mo
770.855 289.541 770.896 290.167 772.012 290.167 cv
773.021 290.167 773.148 289.541 773.148 289.299 cv
773.148 288.754 772.711 288.646 772.031 288.479 cv
771.293 288.297 770.963 288.216 770.715 288.048 cv
770.316 287.779 770.209 287.416 770.209 287.094 cv
770.209 286.105 771.145 285.674 772.059 285.674 cv
772.383 285.674 773.035 285.729 773.424 286.152 cv
773.693 286.449 773.707 286.778 773.721 286.979 cv
773.021 286.979 li
772.986 286.375 772.477 286.241 771.998 286.241 cv
771.326 286.241 770.922 286.542 770.922 287.026 cv
770.922 287.458 771.205 287.605 771.797 287.747 cv
772.953 288.042 773.082 288.068 773.363 288.257 cv
773.814 288.553 773.848 289.023 773.848 289.226 cv
773.848 290.086 773.176 290.739 771.932 290.739 cv
771.561 290.739 770.809 290.678 770.426 290.188 cv
770.148 289.831 770.143 289.44 770.143 289.207 cv
770.842 289.207 li
cp
0 0 0 0 cmyk
f
219.165 325.753 mo
219.165 323.172 217.248 321.124 214.717 321.124 cv
212.187 321.124 210.269 323.172 210.269 325.753 cv
210.269 328.333 212.187 330.383 214.717 330.383 cv
217.248 330.383 219.165 328.333 219.165 325.753 cv
221.786 325.753 mo
221.786 329.778 218.739 332.825 214.717 332.825 cv
210.693 332.825 207.646 329.778 207.646 325.753 cv
207.646 321.73 210.693 318.684 214.717 318.684 cv
218.739 318.684 221.786 321.73 221.786 325.753 cv
329.594 327.422 mo
330.973 326.833 332.26 325.633 332.26 323.436 cv
332.26 319.985 329.29 318.971 327.373 318.971 cv
322.859 318.971 li
322.859 332.471 li
325.407 332.471 li
325.407 321.391 li
327.316 321.391 li
328.79 321.391 329.665 322.227 329.665 323.436 cv
329.665 324.645 328.691 325.48 327.316 325.48 cv
325.665 325.48 li
325.665 325.649 li
329.823 332.471 li
332.671 332.471 li
329.594 327.422 li
cp
273.587 332.471 mo
273.587 330.051 li
267.825 330.051 li
267.825 326.674 li
273.27 326.674 li
273.27 324.253 li
267.825 324.253 li
267.825 321.391 li
273.587 321.391 li
273.587 318.971 li
265.277 318.971 li
265.277 332.471 li
273.587 332.471 li
cp
317.75 332.471 mo
317.75 330.051 li
311.986 330.051 li
311.986 326.674 li
317.434 326.674 li
317.434 324.253 li
311.986 324.253 li
311.986 321.391 li
317.75 321.391 li
317.75 318.971 li
309.439 318.971 li
309.439 332.471 li
317.75 332.471 li
cp
257.765 325.721 mo
257.765 322.448 255.904 321.391 252.966 321.391 cv
251.292 321.391 li
251.292 330.051 li
252.966 330.051 li
255.779 330.051 257.765 328.993 257.765 325.721 cv
248.747 332.471 mo
248.747 318.971 li
253.029 318.971 li
255.397 318.971 260.331 319.658 260.331 325.721 cv
260.331 331.782 255.397 332.471 253.029 332.471 cv
248.747 332.471 li
cp
287.107 318.971 mo
287.107 327.126 li
280.02 318.971 li
278.755 318.971 li
278.755 332.471 li
281.303 332.471 li
281.303 324.313 li
288.395 332.471 li
289.657 332.471 li
289.657 318.971 li
287.107 318.971 li
cp
305.887 318.971 mo
303.115 318.971 li
299.482 327.549 li
295.852 318.971 li
293.082 318.971 li
299.02 332.471 li
299.946 332.471 li
305.887 318.971 li
cp
234.587 318.971 mo
234.587 321.391 li
229.387 321.391 li
229.387 324.253 li
234.271 324.253 li
234.271 326.674 li
229.387 326.674 li
229.387 332.471 li
226.841 332.471 li
226.841 318.971 li
234.587 318.971 li
cp
f
698.246 302.155 mo
699.457 303.729 700.613 305.295 702.678 305.578 cv
702.678 306 li
699.496 306 li
697.508 306 696.363 305.146 695.414 304.134 cv
690.984 297.514 li
690.346 296.495 689.736 296.217 688.84 296.013 cv
688.84 295.612 li
690.531 295.612 695.086 295.375 695.086 291.413 cv
695.086 287.593 692.092 287.025 690.424 287.025 cv
689.719 287.025 688.479 287.056 688.197 287.14 cv
688.002 287.193 687.932 287.302 687.932 287.525 cv
687.932 303.888 li
687.99 304.814 688.879 305.445 689.811 305.638 cv
689.811 306 li
682.463 306 li
682.463 305.638 li
683.396 305.445 684.303 304.814 684.357 303.888 cv
684.357 287.849 li
684.303 286.943 683.396 286.318 682.463 286.127 cv
682.463 285.763 li
691.137 285.763 li
694.602 285.763 698.785 286.843 698.785 291.01 cv
698.785 295.313 694.127 295.977 694.127 295.977 cv
698.246 302.155 li
cp
767.717 285.77 mo
767.717 286.127 li
766.791 286.318 766.229 286.677 765.506 287.847 cv
760.438 296.066 li
760.438 303.896 li
760.496 304.824 761.393 305.451 762.326 305.648 cv
762.326 306 li
754.977 306 li
754.977 305.648 li
755.902 305.451 756.814 304.824 756.879 303.896 cv
756.879 297.063 li
751.102 287.847 li
750.449 286.857 749.871 286.318 748.934 286.127 cv
748.934 285.77 li
756.205 285.77 li
756.205 286.127 li
755.281 286.318 754.277 286.768 755.127 288.22 cv
759.41 295.327 li
763.963 288.143 li
764.717 286.768 763.885 286.308 762.947 286.109 cv
762.947 285.77 li
767.717 285.77 li
cp
523.217 298.028 mo
516.557 298.028 li
519.777 290.221 li
523.217 298.028 li
cp
529.646 303.917 mo
520.961 284.785 li
520.477 284.785 li
512.557 303.917 li
512.182 304.867 511.617 305.445 510.74 305.638 cv
510.74 306 li
515.242 306 li
515.242 305.654 li
514.354 305.458 513.766 304.867 514.248 303.624 cv
515.936 299.532 li
523.879 299.532 li
525.646 303.545 li
526.221 304.902 525.537 305.445 524.654 305.638 cv
524.654 306 li
531.475 306 li
531.475 305.638 li
530.59 305.445 530.053 304.867 529.646 303.917 cv
602.752 281.604 mo
602.752 282.038 li
601.631 282.272 600.594 283.021 600.527 284.107 cv
600.527 296.172 li
600.527 303.217 596.729 306.549 589.516 306.549 cv
582.295 306.549 578.49 303.217 578.49 296.172 cv
578.49 284.107 li
578.424 283.021 577.387 282.272 576.273 282.038 cv
576.273 281.604 li
584.795 281.604 li
584.795 282.038 li
583.68 282.272 582.582 283.021 582.514 284.107 cv
582.514 296.673 li
582.514 302.703 585.045 305.131 589.516 305.131 cv
593.977 305.131 596.508 302.703 596.508 296.673 cv
596.508 284.107 li
596.441 283.021 595.342 282.272 594.227 282.038 cv
594.227 281.604 li
602.752 281.604 li
cp
658.854 288.14 mo
659.393 286.893 658.779 286.308 657.846 286.111 cv
657.846 285.763 li
662.584 285.763 li
662.584 286.127 li
661.654 286.318 661.051 286.893 660.631 287.852 cv
651.969 306.979 li
651.463 306.979 li
642.662 287.852 li
642.246 286.893 641.695 286.318 640.766 286.127 cv
640.766 285.763 li
647.938 285.763 li
647.938 286.127 li
647.004 286.318 646.277 286.857 646.859 288.22 cv
652.799 301.544 li
658.854 288.14 li
cp
627.537 285.793 mo
627.537 286.154 li
626.604 286.349 625.676 286.982 625.615 287.904 cv
625.615 306.979 li
624.566 306.979 li
609.264 289.448 li
609.264 303.888 li
609.318 304.814 610.227 305.445 611.156 305.638 cv
611.156 306 li
605.709 306 li
605.709 305.638 li
606.639 305.445 607.545 304.814 607.604 303.888 cv
607.604 287.849 li
607.545 286.943 606.639 286.318 605.709 286.127 cv
605.709 285.767 li
611.365 285.767 li
623.977 300.167 li
623.977 287.904 li
623.922 286.982 623.018 286.349 622.086 286.154 cv
622.086 285.793 li
627.537 285.793 li
cp
708.928 306.557 mo
707.063 306.557 704.729 305.793 704.174 305.793 cv
703.801 301.719 li
704.133 301.719 li
704.736 303.431 706.32 305.218 709.307 305.218 cv
711.885 305.218 713.08 303.584 713.08 302.144 cv
713.08 300.62 712.607 299.53 710.209 297.813 cv
708.881 296.837 li
705.717 294.514 704.555 293.016 704.555 290.405 cv
704.555 287.438 707.096 285.301 711.061 285.301 cv
712.619 285.301 714.301 285.619 715.006 285.681 cv
715.41 289.462 li
715.072 289.462 li
714.502 287.65 712.877 286.531 710.709 286.531 cv
708.596 286.531 707.336 287.693 707.361 289.323 cv
707.385 290.571 708.057 291.514 710.447 293.237 cv
711.26 293.786 li
714.725 296.313 716.305 297.753 716.305 300.501 cv
716.305 304.333 712.846 306.557 708.928 306.557 cv
485.887 306.557 mo
483.646 306.557 480.842 305.64 480.178 305.64 cv
479.732 300.75 li
480.129 300.75 li
480.857 302.808 482.754 305.195 486.342 305.195 cv
489.43 305.195 490.867 302.926 490.867 300.971 cv
490.867 298.926 490.035 297.704 487.41 295.828 cv
485.955 294.76 li
482.49 292.212 480.641 290.146 480.641 287.011 cv
480.641 283.449 483.683 281.05 488.441 281.05 cv
490.314 281.05 492.33 281.438 493.178 281.505 cv
493.664 286.042 li
493.256 286.042 li
492.568 283.874 490.629 282.355 488.02 282.355 cv
485.49 282.355 484.006 283.92 484.006 285.877 cv
484.006 287.857 485.049 288.93 487.672 290.815 cv
488.558 291.421 li
492.348 294.185 494.738 296.39 494.738 299.437 cv
494.738 304.039 490.586 306.557 485.887 306.557 cv
534.494 306 mo
534.494 305.761 li
535.254 305.629 536.25 305.124 536.25 304.021 cv
536.25 287.568 li
536.238 287.386 536.121 287.093 535.826 287.093 cv
532.723 287.093 li
530.252 287.093 529.049 289.036 528.631 289.921 cv
528.398 289.921 li
529.176 285.767 li
546.953 285.767 li
547.73 289.921 li
547.496 289.921 li
547.07 289.036 545.887 287.093 543.414 287.093 cv
540.283 287.093 li
539.988 287.093 539.895 287.386 539.883 287.568 cv
539.883 304.021 li
539.883 305.124 540.881 305.629 541.637 305.761 cv
541.637 306 li
534.494 306 li
cp
735.658 306 mo
735.658 305.761 li
736.416 305.629 737.412 305.124 737.412 304.021 cv
737.412 287.568 li
737.4 287.386 737.283 287.093 736.99 287.093 cv
733.881 287.093 li
731.414 287.093 730.213 289.036 729.795 289.921 cv
729.561 289.921 li
730.338 285.767 li
748.117 285.767 li
748.891 289.921 li
748.66 289.921 li
748.238 289.036 747.049 287.093 744.578 287.093 cv
741.445 287.093 li
741.154 287.093 741.057 287.386 741.045 287.568 cv
741.045 304.021 li
741.045 305.124 742.043 305.629 742.799 305.761 cv
742.799 306 li
735.658 306 li
cp
500.313 306 mo
500.313 305.761 li
501.072 305.629 502.07 305.124 502.07 304.021 cv
502.07 287.568 li
502.057 287.386 501.941 287.093 501.646 287.093 cv
498.547 287.093 li
496.07 287.093 494.871 289.036 494.455 289.921 cv
494.219 289.921 li
494.998 285.767 li
512.773 285.767 li
513.549 289.921 li
513.314 289.921 li
512.896 289.036 511.709 287.093 509.236 287.093 cv
506.102 287.093 li
505.811 287.093 505.717 287.386 505.705 287.568 cv
505.705 304.021 li
505.705 305.124 506.701 305.629 507.455 305.761 cv
507.455 306 li
500.313 306 li
cp
726.023 303.888 mo
726.078 304.814 726.98 305.445 727.914 305.638 cv
727.914 306 li
720.564 306 li
720.564 305.638 li
721.496 305.445 722.402 304.814 722.461 303.888 cv
722.461 287.849 li
722.402 286.943 721.496 286.318 720.564 286.127 cv
720.564 285.763 li
727.914 285.763 li
727.914 286.127 li
726.98 286.318 726.078 286.943 726.023 287.849 cv
726.023 303.888 li
cp
637.018 303.888 mo
637.072 304.814 637.975 305.445 638.904 305.638 cv
638.904 306 li
631.561 306 li
631.561 305.638 li
632.49 305.445 633.4 304.814 633.455 303.888 cv
633.455 287.849 li
633.4 286.943 632.49 286.318 631.561 286.127 cv
631.561 285.763 li
638.904 285.763 li
638.904 286.127 li
637.975 286.318 637.072 286.943 637.018 287.849 cv
637.018 303.888 li
cp
663.723 306 mo
663.723 305.638 li
664.65 305.445 665.564 304.814 665.615 303.888 cv
665.615 287.849 li
665.564 286.943 664.65 286.318 663.723 286.127 cv
663.723 285.763 li
677.572 285.763 li
678.217 289.444 li
677.852 289.444 li
677.5 288.693 676.457 287.156 673.918 287.156 cv
669.414 287.156 li
669.25 287.217 669.183 287.32 669.183 287.525 cv
669.183 294.563 li
673.012 294.563 li
675.242 294.563 676.156 293.171 676.27 292.333 cv
676.578 292.333 li
676.578 298.135 li
676.27 298.135 li
676.156 297.329 675.242 295.933 673.012 295.933 cv
669.183 295.933 li
669.183 304.172 li
669.183 304.365 669.242 304.472 669.395 304.533 cv
673.328 304.533 li
676.676 304.533 677.668 302.867 678.246 301.663 cv
678.594 301.663 li
677.885 306 li
663.723 306 li
cp
549.863 306 mo
549.863 305.638 li
550.785 305.445 551.693 304.814 551.752 303.888 cv
551.752 287.849 li
551.693 286.943 550.785 286.318 549.863 286.127 cv
549.863 285.763 li
563.707 285.763 li
564.35 289.444 li
563.984 289.444 li
563.633 288.693 562.59 287.156 560.051 287.156 cv
555.549 287.156 li
555.383 287.217 555.318 287.32 555.318 287.525 cv
555.318 294.563 li
559.143 294.563 li
561.371 294.563 562.293 293.171 562.408 292.333 cv
562.711 292.333 li
562.711 298.135 li
562.408 298.135 li
562.293 297.329 561.371 295.933 559.143 295.933 cv
555.318 295.933 li
555.318 304.172 li
555.318 304.365 555.381 304.472 555.533 304.533 cv
559.463 304.533 li
562.808 304.533 563.803 302.867 564.377 301.663 cv
564.729 301.663 li
564.02 306 li
549.863 306 li
cp
f
297.929 302.158 mo
299.13 303.726 300.292 305.295 302.354 305.576 cv
302.354 306 li
299.173 306 li
297.191 306 296.042 305.146 295.094 304.133 cv
290.663 297.514 li
290.026 296.495 289.417 296.212 288.519 296.009 cv
288.519 295.612 li
290.209 295.612 294.763 295.37 294.763 291.41 cv
294.763 287.594 291.776 287.023 290.109 287.023 cv
289.4 287.023 288.159 287.054 287.873 287.136 cv
287.673 287.193 287.612 287.303 287.612 287.525 cv
287.612 303.885 li
287.667 304.811 288.559 305.444 289.491 305.639 cv
289.491 306 li
282.144 306 li
282.144 305.639 li
283.077 305.444 283.978 304.811 284.034 303.885 cv
284.034 287.849 li
283.978 286.941 283.077 286.316 282.144 286.122 cv
282.144 285.763 li
290.814 285.763 li
294.281 285.763 298.466 286.843 298.466 291.01 cv
298.466 295.311 293.809 295.973 293.809 295.973 cv
297.929 302.158 li
cp
338.042 296.387 mo
339.735 296.387 344.291 296.108 344.291 291.762 cv
344.291 287.943 341.299 287.031 339.631 287.031 cv
338.917 287.031 337.684 287.054 337.399 287.136 cv
337.201 287.193 337.135 287.303 337.135 287.525 cv
337.135 303.885 li
337.192 304.811 338.083 305.444 339.012 305.639 cv
339.012 306 li
331.667 306 li
331.667 305.639 li
332.602 305.444 333.504 304.811 333.563 303.885 cv
333.563 287.849 li
333.504 286.941 332.602 286.316 331.667 286.122 cv
331.667 285.763 li
340.344 285.763 li
343.803 285.763 347.991 287.24 347.991 291.407 cv
347.991 298.179 339.542 297.514 338.042 296.786 cv
338.042 296.387 li
cp
435.984 298.027 mo
429.322 298.027 li
432.543 290.219 li
435.984 298.027 li
cp
442.412 303.912 mo
433.729 284.783 li
433.244 284.783 li
425.326 303.912 li
424.947 304.869 424.385 305.444 423.51 305.635 cv
423.51 306 li
428.01 306 li
428.01 305.651 li
427.119 305.453 426.525 304.869 427.014 303.621 cv
428.697 299.531 li
436.645 299.531 li
438.41 303.541 li
438.984 304.901 438.305 305.444 437.422 305.635 cv
437.422 306 li
444.242 306 li
444.242 305.635 li
443.352 305.444 442.82 304.869 442.412 303.912 cv
468.133 285.79 mo
468.133 286.152 li
467.207 286.345 466.273 286.978 466.219 287.906 cv
466.219 306.979 li
465.172 306.979 li
449.869 289.443 li
449.869 303.885 li
449.92 304.811 450.826 305.444 451.76 305.639 cv
451.76 306 li
446.307 306 li
446.307 305.639 li
447.238 305.444 448.143 304.811 448.201 303.885 cv
448.201 287.849 li
448.143 286.941 447.238 286.316 446.307 286.122 cv
446.307 285.765 li
451.959 285.765 li
464.574 300.167 li
464.574 287.906 li
464.523 286.978 463.617 286.345 462.688 286.152 cv
462.688 285.79 li
468.133 285.79 li
cp
214.624 281.719 mo
223.396 300.556 li
232.197 281.719 li
238.448 281.719 li
238.448 282.146 li
237.332 282.384 236.252 283.132 236.182 284.216 cv
236.182 303.463 li
236.252 304.573 237.332 305.336 238.448 305.571 cv
238.448 306 li
229.927 306 li
229.927 305.571 li
231.042 305.336 232.13 304.573 232.197 303.463 cv
232.197 286.175 li
222.328 307.174 li
221.877 307.174 li
211.93 286.132 li
211.93 303.463 li
211.994 304.573 213.086 305.336 214.198 305.571 cv
214.198 306 li
207.661 306 li
207.661 305.571 li
208.779 305.336 209.867 304.573 209.934 303.463 cv
209.934 284.216 li
209.867 283.132 208.779 282.384 207.661 282.146 cv
207.661 281.719 li
214.624 281.719 li
cp
379.98 287.742 mo
379.98 286.638 378.987 286.132 378.227 286.001 cv
378.227 285.763 li
385.367 285.763 li
385.371 286.001 li
384.614 286.132 383.617 286.638 383.617 287.742 cv
383.617 304.193 li
383.629 304.379 383.727 304.67 384.016 304.67 cv
388.535 304.67 li
392.033 304.67 393.167 301.873 393.592 300.982 cv
393.903 300.982 li
392.992 306 li
378.09 306 li
378.09 305.639 li
379.016 305.444 379.926 304.811 379.98 303.885 cv
379.98 287.742 li
cp
362.858 305.158 mo
358.004 305.158 355.167 300.918 355.167 295.893 cv
355.167 290.896 358.114 286.632 362.858 286.632 cv
367.602 286.632 370.545 290.896 370.545 295.893 cv
370.545 300.918 367.707 305.158 362.858 305.158 cv
362.858 285.3 mo
355.551 285.3 351.082 290.029 351.082 295.893 cv
351.082 301.763 355.387 306.555 362.858 306.555 cv
370.33 306.555 374.635 301.763 374.635 295.893 cv
374.635 290.029 370.17 285.3 362.858 285.3 cv
315.504 305.158 mo
310.653 305.158 307.814 300.918 307.814 295.893 cv
307.814 290.896 310.762 286.632 315.504 286.632 cv
320.244 286.632 323.194 290.896 323.194 295.893 cv
323.194 300.918 320.352 305.158 315.504 305.158 cv
315.504 285.3 mo
308.194 285.3 303.727 290.029 303.727 295.893 cv
303.727 301.763 308.03 306.555 315.504 306.555 cv
322.973 306.555 327.28 301.763 327.28 295.893 cv
327.28 290.029 322.819 285.3 315.504 285.3 cv
411.77 306 mo
411.77 305.762 li
412.531 305.631 413.531 305.119 413.531 304.019 cv
413.531 287.566 li
413.516 287.385 413.402 287.091 413.105 287.091 cv
410.008 287.091 li
407.529 287.091 406.334 289.035 405.91 289.922 cv
405.68 289.922 li
406.461 285.763 li
424.232 285.763 li
425.01 289.922 li
424.775 289.922 li
424.354 289.035 423.17 287.091 420.697 287.091 cv
417.563 287.091 li
417.266 287.091 417.176 287.385 417.16 287.566 cv
417.16 304.019 li
417.16 305.119 418.16 305.631 418.914 305.762 cv
418.914 306 li
411.77 306 li
cp
266.214 306 mo
266.214 305.76 li
266.979 305.631 267.976 305.119 267.976 304.019 cv
267.976 287.566 li
267.962 287.385 267.845 287.091 267.552 287.091 cv
264.452 287.091 li
261.979 287.091 260.778 289.035 260.356 289.922 cv
260.123 289.922 li
260.904 285.763 li
278.681 285.763 li
279.45 289.922 li
279.222 289.922 li
278.802 289.035 277.614 287.091 275.143 287.091 cv
272.009 287.091 li
271.709 287.091 271.624 287.385 271.609 287.566 cv
271.609 304.019 li
271.609 305.119 272.609 305.631 273.364 305.76 cv
273.364 306 li
266.214 306 li
cp
401.396 303.885 mo
401.451 304.811 402.355 305.444 403.285 305.639 cv
403.285 306 li
395.939 306 li
395.939 305.639 li
396.869 305.444 397.775 304.811 397.83 303.885 cv
397.83 287.849 li
397.775 286.941 396.869 286.316 395.939 286.122 cv
395.939 285.763 li
403.285 285.763 li
403.285 286.122 li
402.355 286.316 401.451 286.941 401.396 287.849 cv
401.396 303.885 li
cp
243.209 306 mo
243.209 305.639 li
244.132 305.444 245.046 304.811 245.104 303.885 cv
245.104 287.849 li
245.046 286.941 244.132 286.316 243.209 286.122 cv
243.209 285.763 li
257.057 285.763 li
257.696 289.443 li
257.337 289.443 li
256.983 288.691 255.942 287.152 253.399 287.152 cv
248.894 287.152 li
248.734 287.214 248.664 287.32 248.664 287.525 cv
248.664 294.561 li
252.492 294.561 li
254.723 294.561 255.643 293.168 255.757 292.328 cv
256.059 292.328 li
256.059 298.132 li
255.757 298.132 li
255.643 297.327 254.723 295.93 252.492 295.93 cv
248.664 295.93 li
248.664 304.172 li
248.664 304.366 248.728 304.469 248.881 304.533 cv
252.813 304.533 li
256.159 304.533 257.151 302.867 257.727 301.666 cv
258.077 301.666 li
257.368 306 li
243.209 306 li
cp
f
151.292 294.854 mo
125.935 272.221 li
124.807 271.231 123.125 271.966 123.479 273.624 cv
123.828 274.898 li
123.868 275.003 123.773 275.02 123.725 275.002 cv
120.212 273.724 116.669 273.091 113.06 273.076 cv
107.258 273.05 102.242 274.582 97.3936 276.066 cv
93.3154 277.266 89.4683 278.447 85.7266 278.431 cv
81.4746 278.413 77.8066 276.824 74.0854 273.581 cv
72.7593 272.42 71.1357 273.107 71.4893 274.884 cv
71.9966 277.238 72.8833 279.471 74.3916 281.42 cv
74.4595 281.505 74.4175 281.572 74.3374 281.582 cv
72.6597 281.78 70.3257 282.022 67.6226 282.01 cv
63.1963 281.991 59.3213 281.362 56.0903 280.14 cv
54.4517 279.511 53.0493 280.956 54.3955 282.365 cv
56.8667 285.09 59.0576 286.755 60.8784 287.777 cv
60.9653 287.827 60.9546 287.962 60.8584 287.98 cv
58.4165 288.487 55.6177 288.833 52.0503 288.818 cv
48.8916 288.804 42.7627 288.15 41.2793 287.916 cv
39.7954 287.681 39.0737 289.567 40.0854 290.384 cv
43.2485 292.922 46.2783 294.329 48.8184 294.999 cv
48.9165 295.024 48.9355 295.144 48.8477 295.183 cv
32.6455 301.891 22.8037 308.425 20.8965 309.818 cv
17.7935 311.998 19.1885 314.775 23.1323 313.96 cv
25.1694 313.543 39.9834 310.427 52.4126 309.267 cv
52.5723 309.251 52.6006 309.316 52.4546 309.365 cv
43.2207 312.355 35.7407 315.824 32.3535 318.533 cv
30.9414 319.693 32.0723 321.541 33.7437 320.955 cv
38.0825 319.457 47.9487 317.316 55.7188 316.21 cv
55.8555 316.191 55.8887 316.267 55.7656 316.327 cv
51.5176 318.332 46.5864 321.359 42.5063 325.253 cv
41.2314 326.498 42.2847 328.522 44.2407 327.51 cv
52.8706 323.042 61.4966 320.642 66.8984 319.4 cv
67.0015 319.376 67.0703 319.46 67.0063 319.529 cv
65.7373 320.795 64.2188 322.449 62.8965 324.623 cv
61.7593 326.453 62.3843 327.805 66.2383 327.092 cv
89.9004 322.755 113.619 329.354 129.709 346.351 cv
131.256 347.987 132.728 347.262 132.598 345.697 cv
132.48 344.319 132.153 342.11 132.238 339.62 cv
132.559 330.266 134.717 324.394 146.746 321.979 cv
159.33 319.504 180.11 318.662 188.27 318.273 cv
193.659 314.621 li
182.333 312.611 158.937 310.232 144.625 310.408 cv
143.146 310.424 142.994 310.111 144.516 309.919 cv
151.557 309.035 175.728 306.654 198.11 313.475 cv
204.568 311.342 li
192.059 302.773 174.308 298.056 151.292 294.854 cv
f
140.522 304.347 mo
154.879 301.105 174.497 303.78 178.566 304.39 cv
179.05 304.46 178.847 304.341 178.61 304.261 cv
168.473 300.794 152.361 298.935 150.29 298.697 cv
150.14 298.681 149.975 298.802 149.93 298.867 cv
147.924 301.656 141.583 303.682 140.387 304.067 cv
140.061 304.172 139.984 304.468 140.522 304.347 cv
128.773 283.903 mo
127.67 283.159 122.748 280.092 118.647 279.034 cv
108.738 276.501 98.1362 280.397 95.3989 281.219 cv
86.5259 283.86 80.751 281.811 78.645 280.856 cv
78.2842 280.685 78.25 280.832 78.4971 281.022 cv
79.7412 281.915 82.334 283.795 86.1211 284.601 cv
89.0669 285.243 93.0391 284.944 97.6729 284.023 cv
100.696 283.427 107.91 280.996 112.97 282.408 cv
113.096 282.443 113.095 282.558 112.973 282.576 cv
107.118 283.496 104.504 286.066 101.731 289.139 cv
61.3892 293.037 25.272 309.389 21.6929 310.995 cv
21.5869 311.045 21.522 311.011 21.6528 310.915 cv
23.5171 309.672 35.0132 301.898 54.3442 294.458 cv
54.4951 294.4 54.499 294.33 54.293 294.343 cv
52.6089 294.449 46.9438 294.498 40.9702 289.458 cv
40.8872 289.385 40.9678 289.272 41.0898 289.291 cv
53.4219 291.058 59.6489 289.984 65.4312 288.222 cv
65.5771 288.179 65.709 288.103 65.4019 288.076 cv
64.1289 287.962 60.4092 287.124 55.4219 281.574 cv
55.3091 281.457 55.4238 281.345 55.5962 281.407 cv
64.2969 284.761 74.9229 282.956 76.791 282.592 cv
76.9902 282.554 76.9609 282.407 76.8599 282.304 cv
75.7368 281.175 73.5122 278.67 72.8179 274.735 cv
72.7822 274.545 72.9868 274.465 73.166 274.623 cv
89.7422 289.344 102.567 267.007 125.661 277.231 cv
125.844 277.311 125.871 277.231 125.834 277.098 cv
124.792 273.356 li
124.753 273.188 124.862 273.144 125.012 273.261 cv
150.683 296.126 li
172.092 299.042 190.156 303.753 201.577 311.029 cv
198.085 312.165 li
172.068 304.638 146.45 308.236 134.803 309.958 cv
126.632 311.117 118.026 309.417 114.893 306.318 cv
114.754 306.181 114.925 306.03 115.136 306.091 cv
124.558 308.83 132.718 303.693 129.822 297.202 cv
122.073 294.368 li
118.177 293.812 115.028 295.597 114.889 298.758 cv
114.778 301.439 116.308 303.796 119.121 304.824 cv
119.359 304.91 119.374 305.061 119.124 305.042 cv
115.444 304.79 111.248 301.356 113.172 296.369 cv
113.191 296.321 113.105 296.271 113.041 296.296 cv
111.491 296.879 109.584 297.192 108.099 296.819 cv
107.948 296.782 107.949 296.66 108.105 296.629 cv
111.468 296.014 117.302 290.617 123.343 292.538 cv
131.601 295.387 li
134.082 296.234 136.209 295.756 136.841 295.555 cv
136.988 295.508 136.956 295.429 136.886 295.388 cv
124.311 289.972 li
110.917 285.092 102.399 292.603 100.993 294.037 cv
100.846 294.182 100.839 294.034 100.876 293.918 cv
103.195 286.571 114 282.314 125.084 286.384 cv
143.713 294.708 li
143.83 294.777 143.899 294.687 143.797 294.591 cv
128.362 281.253 li
128.253 281.145 128.149 281.175 128.204 281.319 cv
128.942 283.815 li
128.995 283.973 128.918 284 128.773 283.903 cv
123.4 296.619 mo
120.766 296.396 119.072 297.549 118.918 299.424 cv
118.764 301.256 120.809 303.009 123.428 303.292 cv
125.737 303.54 127.686 302.607 128.293 301.146 cv
126.02 301.136 li
126.02 301.136 125.959 301.146 125.977 301.064 cv
126.296 299.536 125.029 298.279 122.89 297.787 cv
122.784 297.763 122.872 297.721 122.872 297.721 cv
126.636 297.737 li
126.107 297.187 124.383 296.7 123.4 296.619 cv
65.9458 325.701 mo
82.938 318.425 123.832 305.384 190.141 315.449 cv
187.81 317.046 li
187.81 317.046 159.313 318.238 146.521 320.757 cv
137.316 322.594 130.951 326.312 130.901 339.901 cv
130.918 341.803 131.062 343.81 131.292 345.904 cv
131.311 346.066 131.124 346.099 131.057 345.932 cv
129.599 342.194 124.052 331.289 134.706 320.923 cv
136.054 319.658 135.794 316.454 131.581 316.3 cv
116.948 315.775 95.0122 318.757 84.478 322.023 cv
83.998 322.169 84.0439 322.355 84.5098 322.298 cv
104.175 319.975 117.431 320.813 126.183 323.173 cv
126.426 323.239 126.418 323.425 126.09 323.402 cv
124.489 323.288 111.009 322.493 102.444 325.36 cv
102.043 325.495 102.088 325.75 102.484 325.733 cv
116.672 325.122 123.107 327.073 124.834 327.797 cv
125.057 327.894 125.031 328.022 124.741 328.012 cv
123.097 327.955 118.213 328.01 113.485 329.538 cv
113.155 329.644 113.188 329.9 113.523 329.918 cv
121.07 330.506 124.328 332.038 125.379 332.655 cv
125.658 332.816 125.626 332.927 125.368 332.955 cv
124.42 333.065 122.039 333.39 120.505 334.073 cv
120.267 334.176 120.337 334.418 120.569 334.44 cv
126.268 334.92 128.129 341.447 128.514 343.081 cv
128.57 343.318 128.418 343.269 128.327 343.174 cv
121.455 336.128 99.207 319.819 65.9971 325.87 cv
65.7368 325.919 65.6968 325.809 65.9458 325.701 cv
1 /0 /CSD get_res sepcs
1 sep
f
33.3296 319.818 mo
39.5044 317.882 56.6836 314.09 63.6514 314.389 cv
63.9585 314.405 63.9917 314.61 63.7168 314.698 cv
58.7056 316.244 49.6616 320.015 43.4888 326.235 cv
43.3345 326.393 43.4146 326.513 43.6084 326.417 cv
56.4287 319.923 69.0107 317.658 71.7725 317.061 cv
72.0435 317.005 72.1104 317.104 71.8315 317.285 cv
70.6045 318.108 67.2075 320.524 64.0454 325.354 cv
63.9175 325.552 64.0308 325.608 64.1616 325.524 cv
78.4214 316.466 91.3506 312.166 104.07 309.332 cv
104.453 309.245 104.417 309.026 104.001 309.009 cv
92.6738 308.545 73.8955 311.423 66.3086 313.931 cv
66.0005 314.037 65.9668 313.876 66.2446 313.692 cv
74.9966 308.231 93.5708 304.685 99.0405 303.582 cv
99.6865 303.459 99.4404 303.295 99.0068 303.259 cv
89.9595 302.566 75.8398 304.406 64.7368 307.144 cv
64.3965 307.229 64.3647 307.024 64.7124 306.844 cv
71.4014 303.371 85.5928 298.918 95.9507 298.17 cv
96.2925 298.145 96.2754 297.961 95.9097 297.9 cv
81.2588 295.406 44.9717 302.013 22.8247 312.683 cv
22.7417 312.722 22.6704 312.781 22.8408 312.744 cv
25.6055 312.156 49.6006 307.14 62.3545 307.603 cv
62.6685 307.61 62.6768 307.799 62.3774 307.879 cv
49.0034 311.365 37.3428 316.128 33.2437 319.601 cv
32.9648 319.836 33.1416 319.876 33.3296 319.818 cv
/1 
<<
/Name (PANTONE 193 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 1 .660004 .130005 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (M'Gonigle, Ruth) ()%%Title: (MSUDenver_Formal_2CRev_BlueRed_WhBkgd_FormatC_PAN.eps)%%CreationDate: 7/9/12 5:19 PM%%Canvassize: 16383%AI9_DataStream%Gb!Q;H!_N(cKP3.q$pg>43?gsPVj#FXG'!7d*_nC:dRL4n=7u%O8IV6,hlhTA7dT"T(b8.dU*+(G\gNKA6G5b6=I4rhKX9_4Dm(W%]p..,TBdGA7lPIB_X@#0Xe#$1X*OaE>&/4T>0ZqJ]3T=*S#uB^Y->0Dhc??7[7[du>4(BnXf*C>2f:S3TBd"Xn#prCel(@H>QgP*%o\t/.qH-tEe)(SHf=8$!5L`Hnebe(<hCC^+irf%Ar][B*3e17X.Bb8#Pi(5djt"It5BF,Mo_J8q40SNn^,uebjsA7@D$DL4?L993%@5%;d<cf<Udk(8]2rP9/[PBCH]C=HAdM,CtI]S2L<%7psr85`kC$kH$h.]kNccsJ==\b)[oBis>H>,l?NmBo@?Jk%u:5oIroUWXo%3T;tN!OSc&]&r)jD(Y4$(B.rBjf$`/HER3^.=YI5Ir9@sm3ae'-dVO'#WGqXZfh@>1!qRGe(?$pEr'+G[E]`;*Q/IS5'ut,q,"+F%jc/3s9"k)Bq`mOaT<,ikC?r.U!?Q%-hm)oKGu(dI4E=9s;erYs`<M@[C5pQa$c7/92Lt4@f5fg`W9BXmhK/A&iD:2RRF_m4BN5k@%XD4gBWtG",',F>nToN@'O3`e3?ct,!)Ip.Ff(4OT1Y9]pm">.2oT]Bips5%UIWmi\#"K^O^O.HqdBqol)/J1%'?EM8q@#d@%B()a%liB/:^_2X/C8VDuR^SR?Xo1>rq58lC&%nd-aH.>1VrmmO=Y:)\C#X'[`2BJh:JI$9X]4e,p6O`H.EB8CNe=/J#>7'PV'>3sI4XFU%=9eR>htDILjni-es2%P_<A%d\EZ*acQgmYXN+FIRHs3L/%_c5Ji:BQp]u)O9pbI5!MsMn,.A!#@Y(3-H$N#LK=:4pNHHMgfO73h+%@#sdjq^j54hSh[H,cg]sV6EIA:98'o&Un3(nM`e>:Y7"h->O\r@DD:Fb>]qs'B=_41E&&!1+M61H^",m@F&n*\?XTsF"p.Y"T-#5%fK];PRb.nO?F+9\`:,^O_Z#B(AlN4-@fPp2^L?T`pu<a>*$P*6V6GIEa[VD4$)9"d+'TFAJ=$`D&S&iM@oUKHN,F5"XQL"=`15f*%g1<."nR<f_&!k&g$-pKGiS1Hclm_W=5Htp_DsSR@$%!IQYmg=Y<tLlRA;=$B[D9:Vn?Cgc_/4ugitTK@68$3D1:f:.(tDd$N,FH^%(_P.SL-(\6Xg?a7qs6??@@/jmADGDKSC*)A:n\uN^J`e=41Ts)<[h1':6P>hG72-Or.f2`*YOVg7p/YkNWW`9.#Dk8C'\&J^7nn6%07-XL2>Y/H9IoE+a"Z-Zq4%?@oS#O#2uC]3Cn!`ODt`5&m(<2?IQW[>pH6j3a+$!*fG"(MrG6AWn+&F7aVD7m(e"@85MOrZ]DTp&%[,?`(Eu[:>AE1hHMf7r@oZsbaQ<i1D+?fW"KTR/94o%!rieGKml0gQO`F*WDDgZo92ugV#NJb0pq`g$TL/S&rDekBq_LEs2)r>bt%T4Ia,D\)X*5M.kl@Z/ss)YF(0%rYOX1lMD$W4r@N.rU*4nI^\)P3$o7G*Y)B./\!t4.]2O[OL:WW7WH>(eN))<(@68I*DTh[j.CC%P_\,DJ*]*j^rQKC[_%OVi[Kh._V[nd8DA%CNTg-#Ij]J&-t/URTA0N^\Vt)*2`K60[#Lk>h(UcqgIN(4(VpXU#6)ZOe7Z&qc8XC!%"mBBa825J/h8VD3PMX0kOeV3SmGgE#A'Mj\\UpK]]qIHX"[/clD0*Ui[l:8`#1Yur(iAa]p=f\Nn\8b\h$+5^3.CMUa#?-hlLXO_%HqUj/D?j/$=o]riN:)FO1TJ(#i=Z(DU=Y>KYWS+(L-9"]g;I;p%G3GKNV*r;-K?QFN/]c[4RA3B%9UKR%A/\4mihZ(Tq7ns^4U@1%er]=.$$7tk*(/QSl#,H!:tisY(gd[+OQHm_/"-I]\Qc482Z4*Y^V#+u"kJS"11%:GYlB;"OHuJ,UB>W4Ll9oA&<p%'$V(kW#]Bfu%0\j[Q_6V]d`YI,:`43\FCCBBX^#74aC`B!C^Do/3RR<TSi`l0\CYS@K)3-f,SAq2@S%VNU3ZG)X"d4YSpG[KK\%F<Mo$+JNTeS#>%Y6h`RH@f(8MeNarh);ep&O.-J@CM%Ii,>k]9Vt1eHm/HFdmu[2KP%Mad`@!J&M8o=N&S9.irlbeqirb1f5*Zba'lYX,b"HKqX3(W%L@/trQ3.HoVZI>"%?GKiQ@q:^4t:/4bB.HkY*g\E(FAu$CA)kX]e/CLgU,,+$_tH;rJ"=AWsR%+4XFC<&UM%t:HcNS.V3V<fJbOo%E/BF>l/R6mYM0No78PK9++Tkt(l[JX8"n.-!aZVQ0T[:t)j<"@Dck/Fm%\B7GUV/lam?dSXX/qG5A`J-=c)]6f=??P/EQfS['%ab%@eO;tQ-do8+.0?faSalWDoHl:i-0"l)<f%O;/Rlo8G3"A[6_t8/6"thE.q?=5kj]STN]g;,PLkPbC@iorS;Dln'V'**:Ma$s7_K)%hto<[MO@<=B(fE`P:XHdbm1B0T4rXO^>-Q][^\OZ="%lD*cPJMrDdaLi^S#om!,,/Re>efHPZNR:X3^GpG]O/9AaZKRS`jkJNKmB%,C8A*T%)ZVd8$b<rjLGRg!%]W4>cMAq9LYJhgWckhu0S2G@pG&*$G8BH[kJ5MUgn!g!km/okLOnB+Ns4qC6sgIXA-hZe9YiY;>Bc%j0)Y"q5.+15cTg!r0M0aX`r;CokL8UaqHn9q;D'%GZ"\`agrcL6`&>Y;gu&ZCHStV3n`,(I14]=^9`1A&oZkj>OUsWr9%[u*`O)-%'\(FE"NBs3)/Ynj$]X0N,>`SW]Kij#NE54,Xq`@Ug]BV9:ThB9Xk00e>Lg3\kPMan@\*fVZ"O"het:R+B)T:=.euYeS5`^`kPKSm%lqb5lHVLOMWU]SjnGnM=8k3@FI!rmtX8LXLorU]+G+L0_ngp`d^'2KSWkQHkFIhX%-Q'qRq,=K)F/Ah)o3Vt'P$cAV>_>qS^=PI(%B(Mjol>%udO=Qkb^V3!8GS)NWSC;^.bmXGlRM/OUq`,89UZF0/^mC,Oa"IGk.rXM[o@Mm,qu]2;:NIA"F8:nJ0kI_^bEnl)pe;#\%O!K$7qfl#@f7<;rM3GPV;@jS;eBW2j<h8%/150nfli57!_nG!i9[R2*Q[&]N]R7"&FAMP'T<UJ.Ni3'276N+S#a=HjHc.l^X8+t"%$l)3]$'fR:7:[:*iGVBK47Ei2HbRO?W4)]0n!Ae78'Qfmm).r_beINN%=#MkHEQpgpYMmc1phd%2d3?Ks%X:RW*^urs7BQGB[n$&%N0,d\!G-k\psJniU5r)_VAejV^T+F01.^OFe.21FW9@U=qR\/6n9../#"UU%`\D1_^AXBrVpT>11(^>>]RQnDA>+r1\a[r=lgC0-%D=n<c"6KTYpkUuY]74S[&Inc%PgE>XOfAB,e[p,Z$fgt$ec-s^?hu:ZW+45)R%pp5pCpj1cYBc#Nt7T2<A^(^c3"[%b)Ut`>Q?DV%6)a_]+JnIts8!7tNW3EAB\/mFs4_\$UVl]P>.'sWc)9:ej&6`0$;1<(qA0f8H?ACYcOZSE/3Vtrs4Ilr]t3h(9VV8'hi0j'](+sU%mKR?ac"8c.)gBO:9`54(T,j5'PGM@:n,*Dao;(9hRd[BU)C<?#j7>CW7fP:PYI.-u!R.-DnaM=PA)`(:)7"4J;OCe)5--n0^VAoB%()f6Oc5Y+(n><.$@o(_JJN&3>,P!t9X4GFcZteu3-SJP&Nbt7Dn'o@KT<G[aGKjmg+b,PEEd9ft(Efmf$)/aLDY[p1VV8"8_&BE]%;[^>s@.i6$n)PSD"osXb*N0gni3:d]b+D_hSQb@TJ&iY-FI9aM)j]G/,Af^5[9D.e/[:[$[1FD"n!uC&1`[5sWO^KX2VN(Li0F1(%JALhE^A[so[>\3Y1A;b#V/nfC#+a41j$@M.qQ#q^>l/^m^]!ZWWSTeiT0%OS_;eO=o?oq4nb?F=XQ<6HDdijEMHleW=L99s\)3XE%SR"OnLUZGUKP@IZkB7"#>&D%DEH8uO]i?-q!bp??bAY%;R_aMsF02'aX1j,r[%C^_lW#s$H6NO1jM4I@NE30m!M01ietp`+K_&?i%lU@-6P1RVo@'GJP_9`dDcI-M+RoB^,7mVLS"@pus4Yo>^a<[oHri3EQJj.NE<Y9(HFNhqJ?KJk,(GB%C>&EIe4RJG8/cRV'(Ef^M%k=.&\!B/&#ZJB4P?c6cY-PX:u5JI5ME@q$*@*qJ0V8jNnJmk-ueQQnTckS3I$F?aN["o/,s/On!5SELbokNMN:p%MtpW_8Vm@g"t%o;/3o-hLMB3N1>i.-.!>e;Iq.[RX5;[%a(M4>:N-6<5O#A]mWG1+1YP8h=&$4tFcX^N@<g]W(TbUh!WmSQ>FB)$Lt'Djf19BXa'm%A1nt]+QJ1n^-p["qGM5EkkXV0Z`GukKp.A??1sYligIrH.]lgXbf!u0qkY'TX#IS80V@:kP-cK-^RBAc]B@IT'r<*R=^:4gHE2;J%C]Mq-;#.QK9*WUg=0LJqUm,^Z'Up["8@:tZ;",ikhG^cR5C>(W-q/0Pf#;=UeLFs/YJ(aD17%ef)7R)qf9[]6>[Y/4H"<f,T^$iS%q$;I6f5''sJKa>AGJkG(dBMZXVP4U/T?+ah&iL?p2jfAm)aBfTMRA\N`?%H^f"7ukg*st:Jj?Wq6hBKe@N?4KR1"5-DjeeWUf/I)%BsnZ7<`*=G3i=0\Fb[a6eeuU[=D'%a@]_#;8^PNPFq#ef:&LG(`BP<4i^<[Hos<=B'DAnY&a(dn+RO9ZBGWrpj1O)rU5Gi6.f&PB%@OnI?8<_&YI*A=rTH)QgdK#+KP:XbuO5q3`&$:"Wiq9fYU12!*BXa10^4.^Ae)^N$:R]"^"e2'\>-""\C-;pCV/(pag@s-D9dmlM%j\cd9/+clWs-(l2.WaK\GLGgA^d:@j"ig.U)oDZ%PTdd0V6=&h2WIVGU@8MI3F,nDmrtL-B"SE!COan".<=-s#oTZ1<&n^C*ij>C%O=6?Q%W*)]Pc<ss]%)fbNA6k+"S\nl:hqN2G\j@`CqF]91C.+(JkcqFR-.DE\bUE@10IJ*G"UAc^r(L`mZ>NUd_CsD*Ib^]mP@T(%<4^dsL]sofEP"gtP9Eqc81pGn0:ipM?YXdmn5_VY#N![pI5sL%REbbCUglebVC=)1,JGV2m_EWE]Lke(<Ee5'HG)e6C<00=Wk[Ah%UBuQ1OrYuN>n:E(CV7;"UFblH4WrkONQar,AMa#K'fKmE)nHh96#Wmb1S406(_s_V"r;p[>NmFKHc!1MoWkJS&O.(>fmeQ%dB9<K%<`JE7;Clu+nka*d5;oOtrig'%[\Vj<kd28-TYeRFjf31+$qaB_d$%eQLLiGdE5PCG,d_$G/,N>o;X0"j%#>^eo+1Z/5P_DsB`D+o%jT<(:dS`ZS(g8",%:Uo"7!C-`/4=s19JV0P:Y28LKFH,7al^j3ijg;#,^NEJ7(GE4Mkf]#Z+uFsJ>+Z[=:]qJ<9eO4>P;0Wa")Do%7M%eWia[iQP"](U0dNu&qrRV_<o8lNCD)Q5^a*X%CPZ:I>I22UR=2<Y)bT"Nd)#OOg8W%#lGr$-L(qZ=.3"/cLh_cAS^2;IaKt/=%[6kM_kI5bS,M^E&mU;@-]\su0Cl8IP@O'l8Y(Ua/Jul4s<o2U&m&_1(%r7_C[=>^XCDV1@XYbMe5JQpA1%?p7qXA4@$m'd'rh9Y@%k1]"Dk13=Xk@JksFJZSA;nH3BSf72NVp<cDXLYqu[TJt^bn\7\='n.MboV<+`tk8<iR*^Y`Nf75V6dF\_oo0e7IAIK8h3t!e@[qF%T)E3-NV4M<\+O44*WK5!2a,W2^,iH)5:lf41u0g^p)ouB]=51gY0^pcY2!kF]H)E*htPm+hX6.P`Cfa&Fg9c6q5S:[X^$:WXDFun%lZ4"_K=>;bI[VoCcCI:K#>S0@=bhmsJNjGTlRI#'DRGebT:qC$4fr7cZ#3+Vg0UUs@=3"-9PG#93jj>dX)3:6g)lu*msTY-B5EGd%:?/YQ;Co5h*R">nr!U7,eD]eqX`1$oX`&tRTAggGEPL7$Hf'adNIIK^3li$[c,rMHkP^r<I%qe'Am0&bd#)c67)-"HNMSYgBW`JI%D,2f)/g`Di5L!0*YI<I1[B;-iMDfYqgZWnD_9!E=h:(&P\@u^CcX4*n)KdA6-YFA;8WE_rFsaqpb=80Y9!^U;ldL3)`QM?bhu'K8%][;r-km2RZj\Gc*)?jH[gCB;/'l`_&j5U_0452ou`G98NYWNGU>0S[#qYm1OfVi(?*q.0>,q$$2X0(hhKo:UR/,)eKg+d(VD/XeX%P8`6\MD_T@Rdkh)0L!sWG,JM`NOI\nk_7]X[HhaNNG92XHW;s2Xb92eo'E*Y*8d];ohDK7gHCP`l$0&<>^.]'SAd@S.qh!Pmmd\4%FXEu$O6agm4WQ&\g2A@&f]ZQVGs><kf%fr'6YOttb8$b"4`E?`Gb\>u1Qb.tZ\+SPf')hP9-r*:YNsoYosPmmBWf]'hu2AS?R@rs%e82M>_n"?>@\`6B\)iU&7^$I4Z_^ip)FY^*&9r]pB)eR5d"uW3lum5+Z-f>9h2e%FNM>REY05P<oVE?si:2GVpTqoP#;<O5MZ^Y\%f]`-+Br=^cjpEhkh:F:9bk6WYf4H\MJ,->]gZY!3]=GF@5pp0K\$m<I0*qcqZ*\GiT4d1'4Z\&iFh.0R0"0/GS`2#3'^(hN^:p2_%:L,;)>1%4PrVdAckjeLcl[#=3N\h*F:p\ok(7bR0Hb3cpNjJo>BQ^to',I%Ef)(eL$QGZ*&t7j;jk9+kYI>X>%oY!\BO?85SPJ`F%?i7IU9J`Lc*nf&A0tfWS)fE%8C-R0;^d],OUX0?L&-p1ZRgGtoNNTb&<8gR#B8s(=CbJ2t418!HSn<t2lR[GmOa$MHIX-/!,I@Ns%QF^)T\\@8K9`9Q4/+:kT>L.)k][<QO`GeUscSl51+/i%XmJPmm)T>`Z?RN#2p>,BJ2QCm3prK'G^[-@%K1:hQmG-F*CRi]ebRa5>%2a,O0=6BfI+(LqX=3!L<HT1PeKW!;"HF8/V&bcu/TX$7PfUUa6Vf<VepTEJbPt<!gGHoEfmaIYmb2T!N>41pi>s%U6)#`8ca4",)%]('_-9oZ7sJ(agcn?fO7^\;`B*WL4gqj&`Pbg5&4$.#0sU\313l%Gu35>RU#MoF>HhU,D1bbW6F%)i^`a^?Y9]:V,_kLJnceV'hB%AhM4J^8shr"r'/OSGP(pHJV>?H["GWm!QO(IsSV%q6_tncGi(33e\II=8R/f52l>!Y?/&91(p1mrba@&e@bRS=5QcCe*8-(2hkf!%k,ngSmXG',pP$tL0i+j:`le(.>=kPkmII4()*b:C^\q+.p,)_`D`m`-iQJ-SMj^iF[CE-:f#mBX>es\F1c'd1Mqu^=c+W.5S$2Uo%9*r!aDI;..hkmklT>(>-R[G[R)#HTp]-mm0=(^XH^W]^>gT,8!+5VSah]"#D<I]5`(MPO>pW#ic=IQd?9/C^%0fHMUXH+rLSUMG\%\G-R"b1h]t@l)`Cn+bK@Y!:*>Mu0tk$XLKVm'YB/jpPR<[SH53Q:m!>@iCZ.Qg_<6TiKOe%mdN8V<=,U=g7D8[pcgG$L>sf\1t[;%ZH*hDP>-0,?C`cIrI93+Mk.K%dhd/`=.?U0Diu%[YC'\NCfIHO3l_Pd3YS_iC7*2RZIr'L=5Qpph&3P_)r91]>m64VBO*%2HFjj*%SbF)NkY=97i,<A*f%HikhG<I88tunq;\QH6BP"`'IO(DB&/_tF/\Y*Jl70?ln]IUBP0.aM[!"uR'NUF%G.:1[[$oVq>2q]u;IX"T%,"ZSbm?-ucnh/!QR<9,0leYTO<:pF!25kfsM\!bRqa76$`tPk:lmJ#;5@,5N:p0J?qbg7t"njt'Q9RR9777sK?C7/<CpoBApVU?L%[/]iU0S6T]`:"\<!f[^,prAi#\8TGQK^26GiDc)?P:9=he(8/kGP-%k&7'%R^<JcfNd?\Xq9@>dD6&1/'0u_A&N:O#p&I;.>Pd.;%Y6l%#=VXj%XfcOXPRl-"dba,H/>_jXe8J3;G;o"s!6X"c]25.2A;8GtK4B'EoO)H`p!2>m#cQ*ukPPIs:>sFi5"G"&]He`PNZ]'&%WUr<XZp5^lT$1P/[7F>L_QXfFgGjHH9m$4k<S-:drEIbF&*!GP/#YV,O6Yh-g^)'m1Y46C+8-VfKgX-=\/msXlg>p(]0)ETXR+uV%F4PlUoL5jGatAjF4]f_?mZL]+cfs>R=ZK.G<Br:(Z^Q2_EdG2JasYTM,WU-`b29VUl(1Nm<^cUc/Ms3%BD\S(VD]"X5-0'NKq>(0%I9YV.f%p_50]NJLZTlEgZ<4*]^,bVWi^:;*!C*_eVe[+9[W)Ja+/cQ2V/eK!CZa^Kr]sms$dW:@e2J&S8Nk%'-j^Kf<kUY_]i',,%e>q7Ol;bJ8]ioXg:D5lPPb;HnDmkNH%24P+LsNK_8T?4rX/j.F\o[J4a:e93#:%I=V4"MYZh1/GBbhCXSkl>e>eJ?Y=aX3lFWhjn%lCH=]b$B/fi-,C99:%^!jD#thPVAC2gC*A#O-SRXB8\im4Dm.+;@3p_IW-l0:@&hSW/_tbM7c]3C<j"Nn01V6qON/)n_;^ol@4c]%jML%QN"m*KP0dO`lAPBP)%q2k]ToL4Z`9T;[)Yq=.gZkf0:O]7M[qmXXf>&f\O)qKqr5<`D`u(_4s5>6Q;0!t?`>DFrclRj.IkMf%dQr4U'1jUSF4nl#Jr(fp=0f=(e#>6TBEW[MFP4^<'hhW)i8e;rH^LsRVrO$mA?Drb\g%Zfd%33sQGiCnG>_Ue,G8.@dgesSYX[rJ%@be</)9pgH]NP^s>^'%E[emOo-*H=l7sm@u4Z%q'd)PCVa5'/T3`kN#YiBSSh<7IY#cW4,286bBme<t_B"PV0,M?3M8D<QuGlQ:8%^?bsUE8.[V3]e^m=ks>iI9CD[V2urU)29SWM&/I2=\>rto[3eD&;f,,"4<p2fF(*c)At**g"7`goCCJtDb\Nc1]nP<.#-g'&oEf(%Wik`WX\O?T,WI[TfFI@F+6k(:5[YHfSqp:IckfR^.Y*&i'Tr:#2^/D*rL<(r]q<rl[A?ZSkp4Sd,l1P3g'X8G)'MXZp%93[g/%QY%QjNue8oZeoq'FkKRC"=@[AWuQa0.8fB<Lt7DKW7BGiH#aYEFuLp(5/g;cUhuPtj`_;30r`h_V@FH[D)C7Kkor6^$S)!'>H]*LfIo%]urcP:+i68T\#ntK1kp5[,2$7p[9G[.V>ut2c0+d:I6/8VW@j6)m:?k>5RDSY)qS*aP*>KmhpLp\K5'<F41)*AL1"o=f@V?<^/d0%,_$8"-co^/k%$o!L-,oR;]8#e[BM*n+#Tn4`6T/R(t3j@Q9J"O83:7@0mo/YUj?1\+kjWsLSmEo]GBgK,$at$!dWI[c@H)eq9l/q%HHPq3#PCQUCZbjW6\f^HSA$)5oEJ1nDu7mRAA0"A0^6m">k_3a@*9a:h#?H0^m8R*=Epj8SXC#/Da:KYcdLo-?0]:s$qbd.r<[S[%01Pfn[4@]r?\Oc1ZH*F6Z#kIG<i->,PKTcBf&)8D<>r90.8SXWlWm;2+k[)YE_i4j)-R*@QCFi!?I?mneC3TnVl]W&.LY\Vp,.\]%p'5;$5&3QQPR&5Y%Kl)C7jaaW*A<4ad\]h2*ab'BEVVU>.2DG1=,:(Q#9%G37\cOKYL/Lq,Tn$NctMg5k\bNd$U1Gnj@p^N=(^5R%_TIhr/Yt3R&^JCOQ2U;6NAc=RTD,P:id;PAcgVk?Ho-2R<6oF@f%IW8l^X;tI<(19XlIcY/Sg1nkg7mh]T!QVQ5l0(=9,PM7=r+V%#!QRR\[oFE>Y&MbP)&"T;mLrZ^-=I_Q1^n_8bNhJm+#>?d19)_r]0r3aq]Xh:b^s<5+@;k=\mP/lO+ZqMl::P&.#9^ee7?+H1+m3%ZK*:"jKZ<'<*>i"^U1OjJbq(:Zf.6Zm/%?XhYa7]E4?W)Y-<4G@"BBb4W?_!=dG,*F(&`n!L4,]F",!4eL$'D`P2!5dYaU7^'nN/%LMGdhiD?l5QT4k+Y*N=dB0DYp_t:K9BUJ)[TeXc-(mtad,^_o'KtN\RfU%0+Og+SHEH@hD/(NQ,)2=8e$NOMj':5I;;Nb"VHRs-@%d)2U%@-J#h%$bB:a:+@e<+Ygp.\u@`0Z=raX<YioA`AU218CA;m@JnXTRX'Ang-TFpC=*ZU(f8VN0?&R=(Gbi`_9$,M:5@s5<3^m%\ne2pdLmbUP1TS4d9-5j;J$Im=G^s&^8.rlZA-#WTrR"tWC7\k^34G!Z;,!YmRaZ7roBlGJac2S-\oQW;_(Kp1!7I59(4EO"@f>1%Sg\/8.a9Q8,$_sCb^Db)?sl:Z1$trQZcnq7\ml+D^WnMhmU0kY>J,s=TZ\'>P=(\.6._AV1ggf!H3PBo]agZ%Q_$L0Q7^`b%UFAb%>rZ&-n/T%3%(]\P1c][B)0D!W_1?[kdPL*-L!eu.V.\.PFN4Z-kgIXOp<s:fkgD9N<%m#\3HXL'FPIr'SO42'85@GaH],5=;e+aL%1P+,,pOuM.VtX`%eLPTcj_cD4^6E+"%2i;q1=[Tn1qTY%k]G6K/:$e-hoTt\Ufh&HlHZ^"N\m6KQjbmF_2/f]j%H@f@Hd]Q"ku+[%/pmVU^#UIqd3G,@]hqDII-fer90oO=AIcDKI4!3Mdkt27MHGXCHhpC.l6@!raaR,AaS5)Lm*2ffdF`!(rjnD1\d)(k4d4^=Oc]N%%#0$KqXN+Eg]>\^C6rurCPMHEM"USs;+ABqlY.?IW\I?<SJntWLn+Tsf3!9W?X?6%4*LfZ39cfMoQr.Kra"Pn/*0`m1/p)hVf76m7%P>(jG1$*\.=]6/aYO*i[HeF9>(3Q2@Fr\eO]1F&eiY%%OgTc(pOq[`QZG7kh+YaMo\s%#,oTR=^IWRm<34js:`!Bj1k"7\:P#Kh1%4)5oO:eEI=j#lg]<,rCp0Q``&c_'P="5cTi?R,NNJVcS]pj2)@,Vqe9LR2(ceeej/adnLRb`mQ+$dU:i;XC:$WhhA+-#\M0h+=cs%#,PGSna!Wp!hDBQm>*n`hu_nX[q>ae(\L22AP0[A<*LVJ+;IX\k2U*FIIrWhcIuf`78,>W@^!t_S$L[>3$Z;m]GdC\V@$#7MI!Wg%X&h=0#rGLXjTZ]um[]L$2,A7M>Ar3`9oe9d`X(<H&jnZ\Tbf`;/=52b,>Wp?:9rQ8`jbYI0l0AJou`/')+1C64sJIRd?!%VCT/R1%V:5XY(p0!l&J[5+"5.17;B`*q,-]*#l-u-C.^&#MG13uC87eVrF;H=K![>N7'+=HTN(ZPfP)kRdCjgS>;G].GS&Nf2m':nIH:=`E%8;^&+.=-0XRf9Q4n]7)]r`bF@>o&LFR_D!MI$E@*$m(gEO0?U0iUu4b*guM'"8`#hn6LtBaN3S*ltL/3HXpTk"o[>2"ph8>eWl7X%=FOR@*gm-q58'hpUj^8D*2&:TM3G878Z][N-(6K8)XAD&T#Ff\gE/jZinCr7*\iafTu"B\qkJ/r:tO\NB>ZNGQ8Gt6g&?Wb,4j"4%I\tJGT'9aId"S93_-VD0rP^P37]>`fNRphLX-7U0C8Pt=!"hi+90T.DjlC6OHI26$F<kZC?o.$Z=_shUofV,Q'_u]!*i=]sI->sf%6-^S<59DLA$@:4tE'm'mB$Q1t&YV7[HoTQr6VCgjI(7fB5ni8\#L/$^7RN%"^X;2]`LK#IQ&RaF0#K+=,KPX=`^L@$)f\&HbZZQ+%>6d;?K5T%)o#3*C%$Wb!131<PZ>H!U-F,-o@PHJ"+$R@ZPu,IkaI`(#70[D]iPg*eMs#Pn$1'CHB@n2N<_N1u3BdY][miGTFbiKH%S[n*bMIF_0*i?0<-fTf40Y%'/51=9m),\GFh!bN]W9b^2EYA"HU)7e*>Rcci)R7;5hBNTLX1+4]##+]cM.*jC/(HG/(ojuo&.X!:%%BCk%5<]!&Xi)o/X=Sb;9Wuple>g)TCW%:>7snDElY/th/Z=qne1[T<8A4g^_MhHmCigPo2nqkEOfFJsUW?!.NZTmLf9.^1($ZZ/%D^tQlR8+L]M,!@-WS`Zam)MAl9B,`V4q`sA6W<jk1;X]IQ=^oD`,KFfa$=2,C[kB66p3HV<&h8*H:IO[4#oPU>gg-@2AL*X^LcP,%\Gk'EK;QLSc60]8r@P!fZ!N-HVnsbUa"jgD@/eBE$6nX\V^+H["!m_)&O'rj?&e292,#tCmc3rG#;\?$Z*Njbj?qQRGO=lC_u4F)%KX9(L`DWQbS<VA(bjt)jdAa6Y88aH\P`[1)mqBr;^carTfWB.ulmtgp\ffK#H2Z4JqHCEh>;(+W&%5^"=)M)'DnYAF6@#p0n]TKO%mGlmNgAKXeQ0+-Q#QEF;JWeLDb2l@Z_3eOLhdSJe\U,'@njQ6XgX2IYMhMI![$)o$h'ObW:/psf-j=F0WI0,ZPjER]R!"-BoB@\A%G''j06DMg/?E3rU.G:gnL>A>egaHL0S_,>sWr8<LM_uI!Y_sd=S_/\FBK-0SY*oh=N@)9r"e#%Z$p/5_-,XW5;Cs4RW`AaWS0TqK%p[K!"UTGV0a_nS%a_m;;Ehb^g-GIVl]C+]0*'YNGP8ZSY+n*hX7:N$ba0rJ'/)a?rA-Wm+^\DYhmrL"U9]aL((+I;b-!F4D0t4NP%TuQo)AnP=CS^?OM.r'm_<RQ!5KN_-/\aLDV)ms()XS-ITO(^%2J5`o+Ss@Br)T,hVQ%"sB=3OZ";WStiV!2k?_<Q/R2p'%p,8Y^(%b"t%=p$%1r3qR7HCrg4kT_1974<2t>HAPmf\@rP\,+$rsKR;T3`p37cWTROhR>ILYPVR?Hg>M_GAXA`qYOh>F_HjKR5hF3.gOD-;%TRN:-ZK^B"!R_?7Wbf8V>e9_%@>;n$Mt77paNK[uFE+j56Y&CSZ&P:kBg6Pp?%acVh!,J_e&>>;o7W4>Zg$Hbp"<s<I^84tp1]c%%E^\T&EOg1RSWOLpe&D,c_WSdq,+C41f.L..UWTH,3Tk.1flV5EFQ(m";.S.p:"hH#,L**D6Rd>enaP4RET<B9oOXV+aJOk7^Y!4u%TsEpoX6Ou.n,V-`agU:ZZg%=\fYH0^h,WE:C89(O)jFh1A^eW#Y]:u7VMhL*EiV^!9c$ksDWKJmEP!N&1%7PCe&CFs79?\1B@Fhr%O+hdI7ZgC]QV/-c?\Zn(M^(^T[]GU%dq-V])F68e>V9=)I=/pc!7thk>-n9ggb8BR_o0W`+>t"/Hd(:cfb0o4CC=`[N;C9"30[=C%Mh1;s9=6CXdAc<R[NQt,W"dJihofD0A7L1mN_E8?b^,:>WZ.d.WZ]dXEddIV*(hcn@kU25I9&DJ"]D.1QkVU3Z:]$`P:O9iMV3?*%r>;+=@`#3F4EJXrQ@.(c+$"-,fA))+\]SNIpOCFnZA/1B@=L9&20UL;>hKbS17\`C*hUY0\f7qB+5_WY_^;j'\E5E%8+C*hfDQt@%'N6WqbEAo*::oX`jM(:##Fsum1=sh7-fY!Xf/ZoNq]j:j=BkWd.J^AqL_=fHBkHR6T""YlYo(9K60r94,$g8q$@;=,5*+kK5pBU\%f\]r2%)_-KNiZAt8/Ptb6"KkLY.lA4B=VH/FC]SZdE-1`6l1>2<764+VQ1F:\54=e%<XS?BW/777RN_XN/$U0fR37Y<VUlN50aYO%'gf;R*XA8eoN0@H;dO.&7.gs=JQ,91G:-r/pQ"U7b'GGdVVJs.9rnea-rqVV@;7*:QHjq/+BDP2oOZu-g\b0AOXW%jRCa)'q5ZCi%+_?E*?;ldg[+8ia&_$f=?II>5-(Yr@IGU=TSoRcdaDN]M\T23uRhs>f7#$/$^\s>[U7pG3O3;U^RM4fN;i1h6XepF@bNDR/a/\H]%i^%o+]dL)2Mg-EIP+KbAk700!??9D/%+Dt<Au9)Q_kCtXPPLL6GMEWQL0Zan%=W5<5<%Ao=Q=MDh'b$#\)p2&;dL")aa@%D8Fhq,%m^VSp=0Y8BGNC,^\S/;;)t&%-pU\`=_s2Zf?.Ms!0h>k$M-W5K,C/sN4gDFVIbQ(`2O?S3[Q8jRlS?Pc#Rt?/NZbV#k'('RHb\`K%Z$Q9>B#U;Q!VMBoYnh*eJPPHFZ/5.!T*qQOegP/t-DiMGkpsM37\\eW]:qN%(LtDQEbN4REpm6'_(m/i+@?djD(DpC$I<0Ee!R^%%_QkcJQ#TB#\6f^dN29),AL9?YQ6`?^<b1S]ppq(O4gQIi"a:;t.k[LY7C$Cjb:mHEWPtrQ9UQ=,EcEgC(h,#W@ZS&FULAD4BGaY&%7DCjcS!Qp--T/i6=jKiV:Ws+1Yq4&/A&B]1]q]R4#;T<pl^Ss5L?XTQkde6cHFMi%f0.uuC!+V`p"WcH?)=,H(!1bsbAifqX-G0D%MfJ-@1p^AreQUE0/4K%!RX:;MCjiEjIGXh3h-/^gFZt:+D\hfbjiu4;L2ifuM2A-,&#71Y99FSRcJRp=EVXRa![agNVd+?<C$A#s%V,0A2r:9f+;A,T"1fsH+el6d43+4<tpTH_dGpjssW`;6$IYqnt=((d,WEE]X7Xq4>F1:?`NJ=dX>4&0^[c4oT??Bgc4rl1%jSk.b%,c7HHhLFao8U*KT,4LBL=67`<8/bgqG.hijYL>9,?B($W2OaNpr;8R[dA_cPdmI$.[CA]F]l2cTVoqI0CYMA23sgmm]:mCUUQ'_s%7[4j:JjbeI5_&;Lbb_JiO"[u4=H:F*MmdO61=^'_T!36_RQPOuN(tP+Q1oUVh+t#!iq9h7/hLm[St.JM\]&BbR5KFED/R)E$L]J^%)*B1d.7q:\U;Sf0;NU/o'IG96$2)r,6E@8u&d,2O51g:8Um(%V#[2tVMn>D=HE4g-Wg!XjkfK$@B;P9Yd,]2NRJ<a!@Eq/KHa`bW%g$FDjQo/C7,r<rT7qn)M3@tt"fh^D$]VNJ[XYY@9@q3FAWn?[l]Y7QGm`UR8jN=@&^2IZ?^.e(5d^a?B3Ak[n7t3q[8DgmHYfd,S%],BHip3h8jk;L2Ea)+uRH*6gjT&jYPkk6D7TuA"eXSH<g="RNWEg0T?s&^O[jN_F.ZY$8u#O-Z^WaY=SpJJ&T1Ur&n3eJr>0lq.i%+j9P$+^uH=+*JC^Z6P7'>q88i6\GLHG']dl&@G"@=5j`P.?e7kM.BqjpRNb$'?RsYcT.)^gNSZX0B4YFN>3jakJ']oe.U(faC(".%.!<KX%?Uu7f(ZGKS<7lqP#DC:)S]+?`Uq<lilIMGU)9<mLT7G?!O$HcD+\A&0E:Ep@Qj2SakfU!PS>oD8MMa#ZEA<.DX1-Ab90r<%=`XS<&`!O7Lh0\7MGlBqWp#joS1+[S7t:"Z_!(P>jT$bBWWQc4VWVo?m>DF@"W1[5`"cm.*,O%/%<J9cUY)5BJ>",XaT:bNYt?:^%0K88GCZGN%!0^7eqar(0Pmj:f?:Crn^+\U6lUJ=60BET!QM#H-aqs5@)#^:Y]l.F#`MIruNBB?B3[J+T7luS+h1.H"V0m8h\C"[+%Q[1mea=cStH@P#fQh#jC$Ad2_Fd%@*nTh"]i.P>57WC=#hWm+`9WjMK%5lqSIc7Fu':T2^[Z.uP0AS,mP@HJs]m^QrN83\Wkh/e[%Hi;C+6A[5_54A/;(a4@/?ddV(rSHk,M3E_/f.T9B7.FLkFg#/,9Weu_lc1ckP2*Uar%d?HId(/(^;"]mHi;B2oc**!OI1CndQ8-b%U"]O[I^-eTI]E2Dp\L^VS0a[/*MuT_oV9@c,K8pel<_6tM2lb)7W>P<qQ53pSj8QcY@%-(2^&O>msG#mU8I"RIRE#52hIRom.^@Q%f0Z5sJp[IE2cQ#tm\0(A92D(;a[dH9?GH7E'lg9]jE?9/n+GuVK2Z^]'6-VHVl0$2rR-s6/i%V[HEU]B5##EOYZ9-@p\L]k>_b+5%#J\kDPeYakX'aI=<s.=FQVKec,MTHsqPD?g3HF[=me'61*U_rO^*-8A#iEZ]I,76gXa^4]F2Zu%QbGnY*,XHf]mf434Ni!lra*A3%>Q%$TQ.@HL,?G`,]mf5Cc-[qk61=J>^X[7YqtU!ndR_!2Ds5)\Jm81CEZ\Z7[<./P)nPM2lfTb3LkZf8?GEXRMpSST6,q95p\G'[%'mm"=+B`FWRlQ<ff&s_qBkGZ8DclIhjBfSujLt9$f.U@bl`g-["gqmR)h"r;rVDG_MRh>Wn7;=P<km#[aQfp+h`4JH\,)qkEn8jU%IL1=ZRfQg$fRW_mV$B&(q32)rf.SR9cK[j'lo@j71YJREk^3:)>?;;\Y?sh?Fku=A9_>!(Y?s=\j>&cAHen"SDAWR>M*p.cQ_"a=%BB8%>oh3'M0?,%Pk[)"\,Db#,UU\o/Wspl?]meq&N8EidRU+[g]mf406]WeDbkLt1:Cc/X_QCsifCX#iV4c&pL$jbXaLP42V#O>%%o=j5<V-V;5ED@%W&#V!KoU*%*)W&/q$An`*X6T7"`>i+g6>6KF"j0c7h9cKPbQo/W\Xn3k>:`Jj(<lr2;A;0*[ou7J@r1S<or5<#%=IM"[*82@?1Z*Z8.lH4be%7K`T3Jq!r&R$Mf9mZ6W190nYJ*(kP@n5L[L+[IZ\.Mre(\?7i1(hc^3*d(%Na5/IN1N<f?SdDk[sS`%`L6_6s7>UAdrYJ8Vf_]_EP""gF*h,_TD`nDs#PTlR:#sh2ZIp5djgm49Xe3fjOe^`egqQCaf"7RY6Xe<oD\[Hbj+Z=f)q996=[(H%>$F$*S,9X83+ctJfB8LhX`^b?XfZ?'cX/0Uc:%7pgGqHDC:0Yb(0g6'X4-J#Kqg`rp__>a>lD?!^Z$8>j,f3sg7,O!iSM#sNuo`G%.Z\AM$AjfOjd3-Y4'Q&B)[DXnNKnj9"XL]ME-h-MBfrZc\om^g4pcCQCVA[HNI<h@T9&:glfn;-ioJloiUUO->HVl[:<n#H:B*<.%>I"+*6YASR%Y\?&fj8b2VLAPMbZENYQ+b/Af(1iYA5(oDKrO1D'pbc'.R$'(ooO),bmEfVh3;3/Z]@_620V(dN70Vbm4XsD0@ide%\ZL/7\gqW8)nYD948cVfoDJ4-`iepnB\p4"egg[[ksP:$a,+*eWNg_+^Wj]cG#_Re^<GMB1\4fYL%ia6mbXPLrI*otY#'SMQ?4+:%`qKASDdP##^+:23]+59QWVUrRkP.W-LfhU)@DZ8`^6i^!j$ftKkk9jI=q#*kgR=tB5dBu/HsN2=YB4O.l#-R';a&T+@r6er1+,;6%peeSm^#%@iIU@S0?To<B!T*]'U'k/b8+9n]I8DQO"V3;-=F#"k56R%)l@[-BT>:V(H*B9=pEUe"bu.@1SV-HI!1Tn'\H4:qo=]Aj%4Bb_Lfm-fM&6@dhJpjG'_U>L!lPpc:eR3OWI4k_GJ!t"=mbW%JV;p%!1;?KaZcqA+0V=6(d(NAtH9Q%bCqP53HV@dl[J+%3F]tYU%V5qadl1"&YKVtFYkc$<&/-TS[>SO;RZ]gtmeB\KV$i]Meok!N";IrF^Nlb=hOk"5XeHscl,*h:[;luorX-Y0e+6Ln9>L)NEFgU+V%H^J5WYt\a%le*-<jK!'+j0a0ZhUql!jbIA'A+ol[71eG$JfHg]CNfr!_CpkoNNKC23YR%GqdZ,p!`%UPT,SdHIf5hUhUnF%hX\F?%7iSM5=V\DQf<N?!7ESXcDX4N_Vg!(::O1b\AhO8#qeE&lB)Gb[p_>osk-lurGHifF6!q@+F"Yb68s\nf><u+GJNf/&-eM-).]5qu%f[^<&lbgd9;Yt<j[*I6Lp#J)5iC*,"jh-X7mqa]]PJSkn)"cr\dLu/Gd)Bp"*t(LWo,7=Le&J;^TY!-FK%edgkZUcnJJ5c/F%k1b%a3Q<Fq_j;sWS`*q6.\qR2qfrm_32<A0sR[J\0%*Drcu5"*UAXb9m":`1AG6-5(-l9WJ$^M<`LSt#CXhno)["k!3&,sEOAL:D?`Hi%?T.61NJbI>h5r.&B@X]J/cU(KGQ:t@D3L2=cBUIaZT'q"FP/EGa(*>fn!q^K0YWUgW(7]6P'XKsa,Z%)bVO5A>O``d;'1-mZpiP8%FJ\U,b1ZIj2]#N_6Y7)'d"d%XlCu-bq=C/RXt'g9-NY9F.Xi)+<P74[r!&Y-HY3Q6e5t\*15QW[Cul#M$9mjMQ$".iX@M$g\iN]h%Ya^nk($=A\XPte$ps'!YGg("IcV>FcYF@/iO.]oHks&oB6dB^cp%KG]]o::t+PQo)4G5-?HkEg-OtKIf\b.Us<O+7(-pc+-d\JZC%,.AnO:sm[l_1;ufgQVSUDLg9`NtB]YHuKfqqk'#2E]M]%D=\DO>-6%"oYVY,W6q$FajV2:?#(g6liYRR-&TBs8ZQdRC0saCK9%Y.%p*V+D+o`BPf4.3N2s3P`E;U88YY%<:!1T<gEZ$+<<r4Ej_%#4)*>%3.qD]Taj8b6p#SH&e@'5!JRGfEiXrU%+P*Xgl#gfY^qQ_89%+@9-\-h72um!_3Oh/C:&?fsfYY[@Q.LuSS\3'Cb\p\9FU_0FR3'&4QN-Lno/\&UJb`oEtA<_BJ\iPi/2R*?^W"hU@O#TS@sX)n2^%m(jrVRbdt1&I1FPVRm2#,mW^iZ$CW&.!Z(Ieo*KLej)GZK^X1&lgnPP.ZQ$A@bIfL@9,aSFJm<j@OKL#I+_")Z3$:A#Lb@_OtX^Q%ADmgV\XHCk19h0$LF=St=2k]IOSuS`Q\MGJXq7^%iQFM()rk?'k0$:1Ot.41!.@G0oH[dY]3Aol_0J/&E4K,nHusI/;!qPPa(@-t%=A#c/'/a-aa&8s/i3=h\c?O/+o%7=_5F\hO"HTB\U%$\Wi]=.2fRVdKij"t,O/69I@7D<-hR`O$.ko]7_\LCLBB2?,0djLe*J\#l%m`$GJpLV;e4<k@\nT.jC1/M13,=`L#gn6GY/c0:tC*i:I?Fd@pVjA:i;oUq(J^'JQAaV@TgtmpRge"iXD&dlnGj_-:nG'N9QF4pI%o.jXJGCeLT4.8'+/@!0/Xa3(H]aAi`!PGb^*)@DSJkO8BH2_r##&V657K2tqi`3c,[NjA8HWo@ppnmFZ4$H/UeX`NA\H6!(.Qpm>%R@!C+e]IB>GYh_2%uec:kA0(n?:d=7-^Po6`.MQ*C#qE@pMX\U/h$^)D0`%lTKH%ShUsD'43rJ(\0:>"/4fT?GBe),doUVXI-_k6%q.*d^I7jST!3;2c&\50T8JX,Y!'G;bPJ\/n*1)c?(SH?:POS78Wh!XP;`_HI".pH#WNApCQlp#F1f/ioj4/]+bR`+D%iBQSlf(sE%qI+.'Yq^Z5q64`7;YD3b>'fB&;caNfET#:P+cZ'>o`u?BeM@$LqrE)cQ1aCqkH2FQPqg!#%R%>O"g<A5'^+(arH:LecDjplaf<KU%GK8dj=Q%B_]CQYJn[hFg^H:);`GrH#f"&uem^oahn%l<5FB:?=?OmoP6,Nu6ECr)@dd@fs]e&\t?`l9Vf69Bnk0B?#4'2s)eh7Q2%o'#t<H-8<t57W/ZW%[60P0=L-9r336E[1-LV0f'f-ZK:'WH?H#Zn`9O<4Z_",):O@VZ-%!c?4QIB]hP%GMuWfoY"RH*OhU^T,[T[%giBR)Z)?pNNJD,B<NCPNrO]Dd]RPF52*1Q0HthWB]XR(W>IF@j6S2*SL"JWF5XslrQZIqJ\gJEeF=lOc]t*gbhg*nG3*iM$rR@uN%'gEP[6F5hB$L[B!_JF%;p#X*Dm*SmaCuOUr*rYk:*1MFb3ZD9_]\FE0e.)qX2.CdOaa[]9HD]kQF^Dh3=Su$1\mJ.u+gUQh;qgNZ%h8[=ddDtp.^V/q"IeZgB1r!31gT?sK)BH:Z>@Sq.h0Z[;Ic?Y>ld4Fr$E-_`_6;%eKo>ESJGbbWZ'iSr3;2ecIOpO3DO;ful`'>_%Zd8<pZ,O_\S$DedU5r5d+ejq&>%cY9=d%K$ZqXGhI(`rD3PBIPI-A'N:0Mt+ZZ%$e>VL@(&`'"Odj?f.KP&7b56'm-kf_Xb&C^6s%EY6u@[hucVLoAJ0X4E4b8NtAB/;XU)F3714>@Z[/3jbX*KrBL>UInC/nEp2O\p/1e9Z7V&TfGe`H"VP3SN,0.G:IX=q$mNi#>MOG%+>i0)Z%b;PT$LY'k6=XkWkLYGcdQ.>p%?G`U3-7HcZ)fB3@M0>EI-`P%:;mg<!bU54Q+ga<\;BcK:+I6lst*:Cbb>)8C"87qpf\K%[mE3l>l-_^Zi&l`N]6:\KVu%"%5%"8ZHAnm;f[frlEh7,?`l)-NTZ`SQ00Yjjc/l2jWES3GQ2O?o1%aJRo),JkIq$GZX'@'bNE:!%bRE.iLH<.n#7J\maXi1Ydit8;[r8]efjE;"$T=%Iaj4Xt^a%/`^RDduZbHQBqQNJ>nY*XC[+Q_HN2i69,+?Y8N1*6H]g\lH@tsrY%Qr5S;6^\tBLm&M8UEtkLYJOq#WD+dL(1Hr%e.'&9eBCh%RK3kMMC,?85^CYJ2Z8GXo)s3\mb#DCg?0;11Ds1KN8m4=ZH3<_9+KX3%3?dp*DnJp>2k%lj329Y5>,a<1Rc1\"\r4_-ZhbUMmWi\hT1lqu#5;,]m;<lllXSiIkbEl8TZ%'D:?hS[;e0n:cO3D;[*o)rnFjo4%kW`I:UO=l3o+-4fc><fjcW(FlAJIm[Jau!s9Gbusm)siLcHIH\r'8`t]7#XdhUg9el-8)qc-%qF*mFjO6u1mrK1c=aj:'&0"#Ro0%bd26kgS%V6Dagb;N4B6`jKJoXocC_%j5l9j@$g""[*V0WM9oD5MM:6\8/:aXagGts7r$&Y1*cZnj5[1U4(:FS3>^A0aq`XjPtF>C%U".0M;P]2nbEIpYMWYj'5`&U0U+U-W[VqHJc)Kf?*GE*nJ.Vnlr2ORb_Rt+jAC,8^>Ee2<_#h*:&EO!qBch+q2:XVK&Dr*!-[i08%E[(]G*kire"jt><r*E4&OC]YIokL1_^(HOB%73^b=>+AhJ&T&eK'S_J-V-MWF.<BD_JK&6_fnD"iaR]LFJr:;L=k:W6@uW9n#!Z4%1pb^V'$uq?Y?eus]qBi0p9>PRV$n;PBmYH<1C=k:)c(9#L05t5MV1N8)(LGKCbs[m(#]M^j5bd2-*'GX/e!Pg4=#sEcSIsJMMYe:%RQjG(9#KT&P*E=^R7^8YJ8^OI<O"6I6+YNUHXSO.(q,=\29`p(65<W`@Y(cuVc[CC+WR4V'Jg.FD46Y`mb0S>.Y_C^X?a'*:i*?c%oF.O[P!QAqXhkWL3"o3&g>b9lj\WM9S1KH)6C^HHZj=h!BB$2'?Bqg0SQm>GMT$b7]MqjTCbU]!AS.$Sa1A:tL@'_iF`N2P\mb5b%K*_,U<FPTe[U!\1&=3!B6Yk416PUG8XWqK>XHYCoKZQW%Ls3r[YY8UBj#EcK7SXm3,E$OT([WG[A4+P_QOt3Nfa#_#oeuD+dkWEn%N6PD,d;\GL#@k)@U>ab"%`T9u^2Q(*W.V?0r2r+$HdomaUm&F-Yt#gnc2ErjE9qDWfO?EQ(H!4n_p01WS[lbm&F<Xf#%@O[+kRWV%/V:5,^(>*!rNGLh=I'M7j1rptYEIbBgu%>!P27Z\](hcm<RP)?o?6%PYF6!7<D8HboN/I#mqQ`#=27P+g[3"5\q-(r'EE/Slb'u@%!W.&HpA!E&W;`d(EdF>Ue)2<s\pdsE]Y%\-nARl\_-Lr5b3&BMquJ?:DG(qNcIVT8kIK9E[f5?S&9N2BE5&fH?co^\[nq6.56KPO%[nmtac/PnV/RWgme++IIs70OdE=<+d7GH?Lbs`V0V@PmlIcb2$kk">lG2D`UI!HJKrB$os1uZtLnDtnmnI%V^b$4\Zr:N!#s+%MK%_M@BC7GW"Or%!.L/A:9BVNjBe\\8[Sb)1LG^951oOSbIC%0/mWTFNN.J$Cq_+ur&ccCZ3>SoS1YNSN;Noge%%^>rO#.sdNLj\<W@%]"X$b&Bk@<,0[?dEs2"RK]kkN1_=+12-kDPj<!/6Mjg>p8o_e7RM:R9"D.%AQru6sgS*>,?1SA3g*Uaae4kPIfEf3h(Cd!f>g73n%:#@\XCT_<]"EC,QK(ue"RY)4%*Gj"N)MZ7():Y*TZouSB!IW-Hq-+8<""C1-%Tlrf>Gha'Qf2V)NeH>+7a^i::Fu`L12VXdL9!,!%=GH(F\h."1KK&s?[LF6ILo\&h0FXLPj;K#4)&i";3WpF'-PUsS0a[!8clg8I*JYc?m@2TChtJCH;&<%ce3ZE,6YA6[CtD]25Ub6+%32$D@D&J:1J;R)5;p`h_*EL1aTpq!=^2<._W*De.bqg1:7Z7>_rd;X96P.DhBc)AXQHKP&<(%MnZ'unmlWTU!O27LT]#dS/Y3ch>%E/6/heo1UtA?d0"<_J!_BHAZ-/MKLWa&u-.c@nWLN3>=94rD4W#\)Q&'8DT&hT#mMaushJ7+AU]':BaP>GnE&6rXWu?/W:_9D<j\%gH[oU0X'[XQ4Yb46VhP\!=&LCD#lFtgIctsUKBd"eun%Qap$m3^s<FAJ@RPRGIm6t@7n)'],Xk4+TW3fmMpA>@A4m^1JeT)#/IjS%.SM?RRZGT+-j%i]\FD9!L$lH3_Ve]4eTdJ+"=<\X$k2?1,;'7C?r/^6*[Yj/a7KK2W9:X1d,1S<0FrJCC;@V=25m>\h_/.eg45:h%1.tOHYQ7Q1"t*@[AIWu"ITP!LB2gD_"qn"F?B;o+Ys_LS>%A$C(gr!pJdOZ#2ki,;*"%=7`PWC#4Q$FgE8t@JZ67DUL?C;)'.W/]%*BQ#-!DFA_Y&7Y11`-;3neetD27tCm"`kX_oYL]G"+U*KdVDZ*7FTcU9pdY3i$H=ZM1Utt!e]`.GKC-M2$kgEHNJ40K<&B*R$*?0%@k"OmW\>MB+4c=QR@Y*,_Zo5ffF"D_n)8q9fHG5A?na:KjV%_#mg9o,#\YOgVI0EFdMsptNGCOUadG34UroR<$;@mCl8kC>j'dMS%ik(Lj3XN#U!@[EV^a'(/0!VX2:J;3ceP(QDimuXe&iZ2kR&Wum0n:^[G?iYsD?<M3/U5ldHoh?UeY%:K#,^lUJ4hFe8rEf6%8=b2%0M-udrZW(N:psc3Gbe_`f@,iu9JB"BKCqtEkr)8'$Z4cG2DQ<):a$n(mM8R1''>sgCZ/M&'-3IV&iJ-W@6-.X83)G]X_7O):.^g@%QAd4DXFMQi@23S\c.)du/7<uf1JBb:EH?fS!i\Ktfd@)Y8stP)JXrcE6jjt,Y\[*#b(Q*+"HQpq@@1bE%`*N0GU#&K+WVS)[mDY$%2,&R!KaHW/CbF_g:9Q.k@&C-$6iTl`icH"'HUG9XJ8c2.-p:jG2RG$3_44mn[Si<BnFkeR!!^qar#X>jA'0T@ZmR!KT"lg('jr*4%eC?c_@AJ^%5Vc/R]]To^2B1!LE5m[77LsuA6l5po!"799pp2a.\eh@nJB2V$(p#l^$%mOh<B*%\M/5jNn25cZ//;PE.Z/BY43^GV%*-Bp:[NW7(/.#E^UG]*f:e5")Won2&6fJsd"'`Rc_rSb&8MFa;/6WA>;@sFu+aC,Z$UCrKd)!)bRWQ*QdVP9fA_kGZBY$eEE*7on%?<49SUD#%qOL#t40N16@d'7t,g=n55k'NC?@<I/^VSSRrcm`YXJVP:L^L/3f+<n&B!":^gJis/Sg%#hZSR?iA$%q:V80!0D*a@hh%Xri3s?kDh=(l[T:#A"iT,CCXY@#->%hRY=JLb!1*S[aP#DpaG:7m5n*l9H1japZjQ$A1d7A%<T!hrV(g:,[Xt6[8h?=R.rNekn-_%OALutlp-,93&^lMf#'2^"T?,LLkl)M#*Y5n2Q/<]J-!Wf&!JcZ)$Gnll=j(3!5l)7ck+/V>fT,WY.tdMN^b!U'gOCq9+o73LFhFM%)X9$iJdTsmc82DU5].9<+?,sj_62<>.5rpjCeb8s"sK!J(*!XEOsAiuOs=`YOs=t.P,#eo0l^SiBY0!:L3[1Z3h@f^=H4.JMWiF!%;JmIVr*$NZ"i:<;^t1qO".T@L@7s[u#%<6<AHop8*\G4=b_.*DAgC'm$oZ0h@T$eX=NeQRgQ4,-;n!c9BFmL/K-E,XUM3R;)?gl^%NUgs01eJ-\C(r5/4=I]D;PWk5O;\Fh;A4YEe.<(gIN^QST`pc,2;"d_F,qM&LoWlq(BME^`SZ6n&3j9WY"B/?aF$g[L3UX(:S3l?%DYYES0jX!*M(7]\<sBmE%-.F35*!(9):O3qOJU/lJ;Jp_/NBWs&B2M^<.\Ohq3n"c@"Jm<//8PCf]Y@pUb[HL;Am+b87bVE+I)s;%MH!38Pe`qfYqZ/p4XV[(>7abu=9r(<>jl1d:ED*$9J^?/%n;7\/nZ&r#=<g!due;JL-<U<$FLig"W!&ICM6&p`PI.'EPXnmR9N`s%^mRdU%>$Pr9a%48@<,?.Rt;]eG!Rp@K,bU0(6!e1;_0I:'hKS%JtSjV6I8nr8iQ]g<,<"ljb?+0<u$IWGVoA5\r\#,U^N(]>D#q>%X"aksTsb:o`pq,2#[jT9dFDE50\bP9=@X#q_kjAN$%KT\&2MW883(>YTG9#uQ`rNd**GMB/0@#NBL8A9fJ.f+E-Xc\4GW4-?l&;q%#s07Ho9!Ol%@X;>6S,Y[QmljXi)PGubXp&fFaBDCWGk7A*UHbM=*s2l:n)2Q@A-]N2;M,VBqkc*f51+SRi1Ju%07ZCn3lM]:;Xr*%e5]U)D@SpR6QKB4BI1q)=B>Kd<_F8'OJJA]Qo8,oP,B!r^f.BB;nDD<AmH(@fnP*I!XVt$_B_bdN2]<B%YVXg`/l7^k'X$["(Jm8%<]s4dZ'5VG1U&(uS*5bdHo[?BXD_D%nl:uB(g"*G?f7ENl1un0^cE4kcS_FN&)%B($S]UEHios,(f8OX0X9!hc;t>]>Dk/FeUC]K%-d+D8r</L*>Gh7o*YD(t=I--GQ%V`+;IEtp/>F'+V)5[tDJpYlP,B!r^f0(E6[Hn.p3fs$^T&ueVr2F02LU:G@G&+CA)&]N9-(tp%MM<l,6"V9G!!/ZiLl*d0D#6oK0$MGm#*uQQb[W0BCu>t$kRXO,cpqS\+`9W6l1=9fTk+X>Cg]hOA3"+#9nBiDf*l^E_YD%p2&,Tk%;k=%(MgP:H[[%en#$`Eh&_Y$=qCjLHVFhu'D58XL"Gg0r$5F;k'GVp&@aLc:-E"\aiXWQa\02S5@8]O:0b1LQjb\Efe?V?U^B2X?%;iZB2T%KLL<c-_AM!hjWKYURHJhDQpjj?#'fX+FCjUBJ%YWBVQIMSBd^5fT%]*N$A1b_?LFL?r@$$$RF_5bNE?)87HIE8Ms2//`J%'F;'9HNWc/KUK+[gR3e]KAkR@!U<RBXW2FaVu?[5HrBV#pb@2cAj'R=_Ks0iQP9)4Yr&likQ0S>&.;WlE0)c@]@"_d<2S1LH>P5U%qs4?oEUjnWL-(l#K2T3p@VRqiCfn%G`8kD/&/\k7XeS7@)be!5d9$CmJ0hm^U"KG39S]DOPd03"6lUnN$sfeIouH+9F9/p"g2NfK%-j>NSNG=7.Y4&;#e/=!.mfbD'\MLH:Xp&3T*8dNrE*V*u#K?&7rh+&Y-M&,X<(Lb\'""nQj5Y[p-NhC8Ff!jV/bW0MG*FnR,n)(/%/QqErd)/pF4t7B4aE,1,oF3`)/M:"s3JJ_0XsRBo.$5Fn!<CMQdut>>q&4QR1q'bI4H7Qi/4X#%!NQmX-.>CPmkta"7?KC9_$T]P%bZDUZj;\FJ@-3%@n7A=BL$\8BCl)`fB\lAf-lSS&]+V!9$OUS2!pL][(do9ofnhTV&.oHqnsbr%1e]Xg\G*cioY<@PVgrE,6jQt2%TMrZ#E7tdE0\Eg0K!)oI&#:chfsdAF"aC/I!;RDr3J&C=J1)f[[?LiJd<JIpU?;T(!E5FJRsb=WKHIl[VFsA`Q=DF-%YOaGD)Skm%aQ\NjH7ngg=>Vj"(mi:g&E',c@l)V'+m=l!EZ(NY,D`,$`Z3T=mfABe%p)X5Fp;^@<f+i<$-c<m#a3YZ%'jhCdA$<:UOUDX3T@2m%$WrW$ga\%eJYm-(/G(t_.Kigj*ee,-0_BlToH*XlgeX*fUG@C`!k9B'phYm/s/NqP<XC=ZEMPi7ZUGidclDt9c0[Dn4VL4CkD0LR%3?Q$nS&GEEd[dlO_jqJY/hCBNc5gZ,fTS"o!3?hbn;oD\"S0(]W,<2QkPcgI/L"WO"[WS)59;)@,4ML?HEL.13gG@]a`'MN'6P"e%8,uSY,/Kb"4!LUdE*3G\'V@nr$7mOjO6P:?S(tiY,RU9oH*j%J'4XpQ0G-1]8'VfDO^N:IkjnKg6p-!0)8J58e789/**P6K);A]Y%:_0Z<i$o[/E!C*1iYSh`lhW^P%.+GCFue/`X.Dh`8sj`"d%5n*&!H?'#HTGF]83s9=;O%8!XD4/QE8'"Ts-sfgcO<4(]4RnmU;G9%=:@I$\pUt^0]j>`>+ir.>K$Y[6a./nck&j;lk3F4^?O>X0\K7/MD`ja>B&6g1gtsA2aV2mQNG]F#t+Y*M]#Ji[S:meN?!qUB!D4`%>TJEqKu5?)?rqlDcF@'pZillAE)A5EmM5t1K5>+N(bXRAp3b0B!iF_':H*f<*oB'M*ALdQ/8iPK=:cKe-6W%C)n/[YSK!f64lOm)%2$FQ=*a%D&9]/o`0LNh9G$PkD(%fjBJ%+(c-9>O?![btlWu8.>f_RZ>->@.g[>@Y-fn,!<D(%pt5UTPLOANf9MN+84:&mXEMQr.!%R;cW_$hK9K64O#/qEe`rV1A1r/A[R>!f1M#E!ThY#m&%>jT'YbjpQp:KBUu4"g3q@J-g8H]9uIu%,#1F3_]Ec*^pLlL;lnV7)m#e%gB3&t+B&S6F-Ga$nLjEcknGV'qOR?%FM<kg[s?AOYdga(cS5bXQr&=C@OE?0L5RFfmtq;\aW7g?0rjH2@i@XBJL5n;W1#?nbCllt%6mS1J0'aiTY"MDJ"_LC?=g/%L-;gg?Zn<55/hZd5Y0;N9i_%i5mk?.Dfd1`+Z+YuRR+s@8[1I1%#;)=QR;BB*2nOeX%2IT^a(T:$%V]q%NW=/m24+%#3$jhk)-S>enU_'\Tbe)s3F'R[hPYnIo-@OMV-m)f=Oul2sO6L'd"&)tTL(%*V[Qt*JbUsZFCDnRa%+YE5[Xpsg%7kj)bGF?@e`I2<d/VtRr)MJKX76f6nSp@ai9Pu$+Q4Vq5(k3@UU]<ID+D3:Y%M)eSYWrK!P/%gd$t-l2520dn@<N&a^smS0+)P?A%OE6MA>K4n7/Z<?.N%F6pK7q@^?eZ1_g2Sf,9[G0)e!7HZHQLCa#!+oON(tFt?m9]4qcl)q*1&ZF0fVKfmZSFiLWP^L_(*>SF_:Pm%'*a61[s3Pd+_AR0@3#5l%-Q#+l\iGF>j0"e!G>RER'i=sbbF];DM1Fa?WUtXY"N^o_S&'t5q5ib8b3^u@XKN3,k5+sVVF2UnJr\#%NY;CB-*Uad:CVMR*G,bt>+A$B!$BQ;VbSpDBZTYN"uD6k_-aQ!"piu0`eY_cB2aTSZ(4u'_r[NVo"&Y[Y7ND+K%ZbU9UI^\+m<e4%*88W#0T1Xf3>a@rG2?q_&F8I74,:UuLoKgAV9mQKH@-BY[dX<lq_%IXP'(kB\8-Jsl-[MckDC+):m=.]5-#7"@3<:L`=9\OW?N)n%8/N\(@dsJ4ZCM_AE?en4W6kVm%+]<`>i("I@FD$6Cr'TNapJnD3P!:-*4@;(b46m(1K`K:[0NRCJ:h>/8shGWI8DBR)AOr:#p:Wp%1E;/?'#[?*2@Xg062i.mS:i'GTH=;P+sioR4iT]@U8LEJ>:02D(m-Y7VMPkCS-!h`TjL>,e!ku8;eU4)@]bIVFqu\=/?r4YXNEO0%,@]pReKs&t@`%1NCF<Rp#SB$-0kp<T^lV)>$i"n!7j8'<=V5'o/54W<=nG#\__>cZ^?(4`BVVo\CQ%B)JF_/<^`13nJWqV!g[e-0%_Wi]9gGE%nf5n/$\7``Q3M'i9+Vr9Q]IjD`W"icR%,&)e+M*8KR:0<I4%$dp=,04STo(Q1!)nZn!a/c\7>X)g9hN22<#>hFGUuHL%GaH<MPW3R]K3M$.Fq9\m>J1BD*"qNLLE.cs$>p/@(;Ln'bUt*6iNd0d1aJ2e"Gq]K8+f6=So30n`eIC#4]fL>^e&cRFGn6`/m7$F%a^Wq&(OCrZ=2Hqt3./jlOf6<V$#Ns]]$N.$iElm\X0Y&B^i&<)^I!#n%;HQ]PpBc!>R8>RJ7/XV)K%D8j2)*^^nCM7Cr(e(c_W`I%JH\A&;q"b*PV=PVnkC9tZ?@C]&dKkU$7l`Vfr%phJ%)#5'G;ug.LI^PXTbm%1%_C-Ho,5R^6KpBRL1ii,uZ1Ymfo"EnTSs09<9#Y%g/9'_#FLUo1BEHCc7IsdKK3:WOB7P'nh!LNht[[IrkAGbF]##t;@;a<fn*+I;a[TmCfB%MK>i"c/P/hdNlLcP!n[Oi.$m>%O0JBa%IH6,k5+8irkZuCi1NWe$Vft9u=#%N61>PoU"Tg51lXW47>uU@-:d84m_,1"8&B?JAKo-/`4C?OJS<GW]-?U%M7a<k:KT.V-B_3P\%P]J"8OS(7*+^)j9&LT\<L1%A[%D7YCDDLWJ]+tUM#RKCd5Q\*O0Zd;tdqqV'"!KeLM:2kV?m+,P[DCi-'\s>./W(A:eMe(+dum(4%Tfo6q-jQ<mOtF=)!Ft&G4T%g/2("[<cDq;iN=OhR]o1>a;_J/M+cL[P!_cugefEXLO>S^B^bs$cFP5N0g.g?NF_jPoO=PM>"!Rfb%iJ&ps.LD;4V8.\6o-Au"XsZTrL]t"8"ict1RsfnT6<[3QN1)BQgR)9&ei4IMJmlA:S%LG/f%!b+mMDW_p-,Ci1c>^%BeXpqmu>t3%?FD4(pGnPQCUctcF<nE2Vplt8ZFp5R@"m8mConj7n*6NaH75.g3i9`Va^CWU&T;(I83jV,a8IpB:]X2/"Um>+Bl=&Y<fYHVG15tJ%Li<WC!.&:GC+3[V7X@p1!)Yg!^c55H`nV(;n#kN(lk:&mf53H/iY_Q1CF\.VSRmXMg'/)l&IB-26uhm[3gN'Yb(sP:^>V.G.G&#P%`j-otOmN=V!%Ua=B!Nm?n*476iXunbib3ptk_)+G*EO+u#uEZ8@)4hUBE[hSIQ!K)&NSj2.ooiJ'QekD?&>!OLt_A!`fWSHLW5[I%%.C@U;9C/]G'c>Z&F<-VZ\0J7po`p;QN<LC$nY77O(k#?2O4IL9%LqF6-!uW@'1h`"gcL\`&'(27t3XtkQNq:#fdXJ$t(Jl)QfJ7%B(-,ZTh$_1kT/AZ7Z.nS/9G*I?sOgIEI9F+?taH;=VHMk1GP2K%5uor\./b"9jS;T]h\/3_L0U)?jBYt:Q#h(>^"NDl?e@A@7%T?%^fQoM3(=+5QY.Xe0P\J[]T3q91-op!7"u+>SDh\CR<9itmaLU4AWbYW)PBQ=e3uBN@180c!5kTsRlm`*ej(p[a2I2O,,a?Z[\#lR%Mu`#.#<`Nn2H`-C%&3kt[La3-io8(qXKnL:gr./S*f0pniL!K?_DlBe"5c&-A/N"<9k'>r\-8OZiVP)?JiWt`Z9g;,A&Dn]s6(u1%+Era_!?P&Y,K3)"+NtY!i%6)R.SQN?_L0g4&>=UggK0KUYS05f%M^>%:/MCfP6_i_^`>P(7qAn@cr]6e.MeK!h8]j_!gjh`H;;0l%n3Klt^a]?pJt^<o?@q_40oSf7YiG6r+k/N`7Nm*kAdbLB/B!J+ckOMi]?U`V'QL;o9K.P/hk]BJMb9AlOgZ7!"i[Gp9%<ESe^#IK%6:U8Do6"F1<*?ZL"%Inh3TVim3W\_H@=7PqbE6d>EA4Ok5V@<6C=!%%)I#=jLLG`G`%9P&=HZ=E>a!8hK>he+Ha$lfE0*_5"bos.%NQrX4P:ltX368oYA]s#J'rE"'M.*A>Qk:B%PA_Mb!B+&%:V[,nS,nRi90J#^KK3jOL'TS*/aX-gR3pf6VsR3e\1mIN+pouf0Z+Zq%7f6Q#\6qB4ZjVXY4>&Q\=;i+s4Qf6C#+l?X$53N$EJ8*\e+21D#+Eto5K8:($q:b@-i>\-$d?iR+[@`>d""uF\8-sU2hUtkYis(<%bi?;r[-(!j6A2U<$ek2?-34A_SJ(n>d!Q1];>R9/!f"/E2JsLnhF5F@V:!JS*)%JB;lSS1T#)>O9Nu>>i4c%E8_=e"i*qf@b[K..%OD]N5NQ]gLpT&BY!H_G]%;(JP_egY]O8sK=/767fm"hjM;P&r:"V=oJTNK%C/n#k&W*<Z##S>t3^k';4K*WEJg_10*K%Ofe4<'!$%I=2J^N,WqLI*.I<m9u$.VX^HS['L=<1J?K^>bOKos&d.6^*B#K/,G8Sj,#pDZ>N@.B-g/u(P2rt$0Gq/]1[_^q[$%>cr=%"9iJ-C%!\@$Z?<:Bn!DIK!#&a\uaIr7B"W?6k\0*(kR_fj.gSkZ:W8A6@_?+=QZouC,mlFVX6@h=Z-NjjKj9GHqJ7:Fs38>sYYuQ#[Al"?V%7$oXL7eEB4_dbt`HnC"!rbre^G=5#k20Pc'gC^9P+*<h>6or\+1ib'>Ql0"mCFFd?V`&[);d]eVD-8&3!t>8nYt1Xd/a\A*AD1EZ%[_oQUW1S3aBnl$HKeAr4K[K<NNsPf-6YFGJkT5ZY"J%r'8JplEZE4=<j6h$j1GD/LiEHa6A<m:j&^fg@*=8J];*;r'j!&;Z8fGb_%eu];r,!kY]n0'nr:aq+qT<s.lU_JmWTNsZK9'MijU8a5PK'9ciV'1ZIjU#<m8dXYLbmq137M4dS,""aqi]&B`+da*^&$06`F:r"k%(Cs=9E?/+t!>T8b$W)([&=^gcnH,)`M\j#Dm,A2V#J53]%a$DqKLtnok""X$X\(%&/HqdP0[RNf"7is,h+!T168Z-cN'&7kZmEl@%pgJrtd@Mc9oI!-)pn"EZB./m0"UJQt+I,!jU.l'j_9%?6h<8<DgnaF/4<tT+XgiG5!6kY)#pF,Kh5$trkW=AE/<<aeR'BU(m^Q-^%"=D(g:[&S.5uDg86-6i>lnk!CctqO21cUEY2NZg=ln'9$7l(];5':,<i)+\$_3b4I%n;sfW<C+0Ekhb=F]A4%bNIu8S=FPC9^4Km%$QZL(`f"Q99ho4bLM?iaN?M&gc.Dukc7/&6'/<Aj_>jd6)CLE12NP\ZE)jk2L6btS/3Eim'J$$\i5(I$L0^1Rk=P`toD)pQ9,W[#%#HCV>U^`8FeDba5eYD5V))s7?KrD>C%93ch=j1nq)(Qi+#U&5_!/r8FQV<ab3[.u<43.%tQA^;Ak`HP'Ag*-J%Y=TjK?*jDG/P%^%I@;!0[KD,t_JJYUpfpX<\/gLm%&Ya"H!uV:+\XH-oGp&+bjnmSc(aPYmS(D2SOl?@@.]V$"HaWF>1.4.qJ8EFGt2@28A5F5JKoIZ%o=0ulULllDD=OQ>dpk&ar$@=+U11,No8D=1`92-4=Edp'O\T&%(lHO4NmqL/UneqH4ds-J*&.)RD<UIk--t/hOj6]>ULlWW2DMDa%Adq\-KZQ$Ok^ZU)6lmZ!is-hjN#-H*etOraI($^Rn\UN=j0B=:&/B0fMl(LTI-QfR)hO*AV`68t!V$"0I"c/-?l0d#ih/SHg"]/Q%ZO?WC2:@pY'b'4]`%eD5O1>DXF4mOU32rZW'T_PL4B,-"PpkQ]*M<]&23!VVZJ#&=UstLRd+^sFj#XQ!ZmY1nTiPE^%eg);46Qc4%(8`p?mA.!2A;K5,1rKZ-]Rsb4Pr]fmCpei79+o#P]-hEU#*gX.*e@(1Q75S,kco7W93=K&:@T?LEiA6NUeK1Hn.$A2FD;gPlHuE5%4I9Z(L7HLtQ-]qZ8JZ,c5VAV'Lg&Tr!VB=m]8WpQFRYL=AnQ>paJ6B6X>!$X\,^U^5M$:,i.1iDZ55WYSYQHH!"LjMF=s&'CbX`%%UVkYZO1Vo.a)+21*Uh(F)ab3BN?._GD!fT3!tP"V7&b0V@k`%iq?pI67?7/'Oh^u4mdSFr7M>R?//^Q0QHhd=YbNg,DC@3ci>M7R%bWqO?*M2.`B8t<4[Z8Wi.J3m$oeE,f_]T<th,GNf%c=KWJ?P)V*3/TbFW9WmNIc/,UEd$,K8$Jn(u1(I)BKUU=?^aF/G*=N6(I1!%*>!"WZ>]9/7#,Ed+iMAs>hiY^:b$i'eJh\cW&Sci)Bl\O_&<gGSH?J9_U-6MI9fa3<1!!WA$B@8[%J,Q0+.#<K9:nf)[;TM#H"an%N-3R^5!/M$U'5[5%b3FcfGJ4U"'PHa@6XF"_mGD.A/!-0Gs-8JK49HL80IEG;0WB/,E!I/i<1qBE47A6bt$dYdi8Fd&"44Q#!*;f%)8b:01X=#7GjIKRV<Bu!Y)@7:ga!'&"gJch1,b%be9t-b`aeE@o]fRA]b4g*D)/SC?Q>Yr;==^X*&uX!O\3-V`q<5r*CRr(^%ZM/%[q#$Y9CX,[>WBL\J7`m9S^2F(ffgbS.6'B]!)M_,Fj`@ifg'sB`-"d%*<?fT),3)R3]jj5G56*eD*qq[@R69/!LMa'HD$#6@RcL.%;.F$6#muB=R[5-8bR,&Wi-V8r&VfIfil2a;oZ5l-g</Wdnhl=*#/t.5/G"[SJ;JM44<,7?BV5r&e(ICT8>*F3Rc8EMRu\ahJDE(.%!4a&QF\cN1FqJM*%dTS'eh=Uk+^C<V%kuO2@JaFLTG"V/q-n]Z8#3NF/f_NZ1RpnW.u2A/\Cf7>K*Y%j6f$l[bsHF#TG1'T3YC@[%(ND$W-4$1#MK8rm/#_tNY"&#r:?eVk5L:!&;5^o]UcjGsHDF,O-c4C/8U7CIL;Qc-7[T)]4qg?IVaWA4ES0[g6$uRR82[]:kVZX9%F'*);(9'heckHppb;'r"3[Uh8KP;3k"Xp=9!1rL4VR>)MT#n`/6k?T1d1qWpcZQecY;ndFV7=u?b6*s!]k_:.l^H)=*u-K/."mt4%$F*]*iG5Tmo4==[Sg^[Fo5V$&KL[::XjZ]A.@c2j9j=4NPFAp6%LLN>nOs7M?kb+Z&<?iKS;Rqd)[:YKblG>KZP7(PXd#oJ371l,%(_9"h:5CiC6%kVkjmq8jG+nLLE?Zcd_+qhscrAE3L+>QW3C!\%Y'CF,qL<(IbDKWJ&VQdLhk;u\nNp(HbBD+RatOkRYe=jl,9&J&%BaOV.VrEW9+"Zm1WH6@7/lc&:OdT(b=BTbiQ#`F<I"Gt"idH4pPoB19,Q8R,R<)P>>8@Q.A^QKVg-E,f>4UFclWh6'd:/V[3p0Y/%6Q'$%K^7m:*L:*nXc2@N?Wep"XL_2%Di$jrVY>+K_(QIm(6q:iH"P'!.h&b;$-tis*&_;9R.uNWIX%7>qmF`;0P&:\rh!]6Ka!kY%j#/2NYOV(oWABTV1o+n$k^/Cc<Ks1+7_QrbKDMr:URRU?5Ve)CF]OC<$7m%aD->88Q<&qGDB<7jDb99+f,8luoTlR6W2QF&&h><<%@8r$5h'n4@L;2jEA,qsGo7us()Xu:0'"%nF?qBs+,csc[H1QF2%2Pk`YZ5:MnYa3ti;Og'IFJj!.89PnNB&V\=D6h#ar"UaG/WYF%qt_trXiI$qN=PsDA+F'Hs(pF$,Nn2WjW;`r?EcYQK]WsQU>[YaV=@#u=Rl^o=\Crf.e<1U>'Y4Rb>faUI$R4l_7u5rq6[SPlSiL-%CSi9EONl">89YC;qPr_03MaS*kG?R(3.1fIf/[?qEtRT,PneQ)m^Su\NqEs#$1]%BM=qs$+t>dBLi;*5-:rN&5NoP$=/.;`j5Or.%#Xsc%7bO52=RjBkX.1W7+YN0q)mVud"Jfjj7aKZV4V%R[m4J`%-KdHMWt$Y^[I$7UH`\+BX3O)8_(/TNdh;P]\YTK1`Se,V8K^:>%7D6%3Zask@U#ZGHPR+7^qB5qY([CsINbbCFn+`EI&:=[2N8U>Zo3*=j79NVCg8]rq$mld6BSm@a@+^L$2'CFOZm0$\irNSKCFOB5%dNQLV&VFPhFC09L?U5uMg+jq<Y<te/YQA%*;m`8[E2&9ACS[[sEZ'<B_H7u$,=$W]+!AEP:35)qG.[q4RUVuF;L\W%\Cd+Qrsff\%ZquF,j%u*;M-&/d:7"P.ko6V,\HH=h/HSa>#;U6hFd9u1kaA$O3BR?=0(D$B4)[gYi_71@ijMrCe@a%M6E&b"jIqO/5tSiHD>2i"%mMr*\TRJdX2m:u<a^X0@lkZZ9q*r:I8h@#"8U71!>EHA'<Lf_6&+JF%$NkN4g8&5GXE78fJ4C)G+8&$0i1nR;DA$bqq34jd-9>t5%&N.[<gkhbQ4)=T6h1Mq2;iEfcjolSGJL:+j8$K-$")cS=\JStYh$6=AFcr@Z"JX4rH4m^F-#h9#QKN+TdZi@9..HHV.i2q7L%pV;%`Sd<jJr>J`R*Qe\>\HfD\S+*',guN@fp'R1&H#/NP<ZGf5\.Bq-<X\I^>A)g]i#$X>%bcu._H]d+A#"s8*qX7QEojtV)Y<1P,3V*%Ds(Y7(E]9)bM3cMH3EGW7a%pTRuEq`i.AM;5=%#I_\Z;+WcY"]%]asO(:<X-'CIFehpet+X!X1neu<*(akCPKBocgnEBs'pRWst)%D43M(Mb3FH`a<,A(>.Gfqb<m*hf2CMeCQ],'+C,(Ch+fBKW-:1.&uN_QZpNk*(Ml7<$[@/$F*tq&#5Pm5DW-VG&cbt86QD0eJ`J7%8?l33o'm^*+EU_k>1B@R[=g-dQE#\U9Ok)PSRT>.[4uTPTn_t10%KXifk:L"dYbYeRX<=9fH?u[8#D,CK/1Cd^n*!P[%bib8ZW?Y%'#&.6-d6*Hm^H6!*L8m:m4K6sH##fDRX=<"9-FG[=OB*+QlU9+BLchTa@.1Q,?Y[ua67"Fp%#lOYRQYJV8hKt9#<@>(_oo-LAd-E%<g7E@%b6#N!TGq&@07G-cd4K^SO"!T;kkY&]4GMN)\eSY5:npJZgdaIFqZ>I"9s$Hanp[;`)c6Ff`''&8.3q%#L<TL??"iBI&UdT%>F),VV)HN-TOf8['l]bln3-8g`!S("\<mI8#Ee_'qk')6i^=.lk\5o(j,kVm4JM-PI4N_!>0XLRRfN>=0>H+F5)Y&)_(2.aL3c[s%<Luh2#Wsf9NarEF!p&r$?.j/q^6E%B6'SIp9NE::\dL@<"J0&$amOp6,LLDXX$;SM&6pgIB5rG1,aA_<\Eu*=QuP_Q7/&a!]5.].%:XUc;ds!H#o_+"9fqD/0FWsi3NE:/,&$da%'+:"8GF`nfR$Dho$LEGfcs@jA5"q*&]+j1'q,N3#T*CRVS'Y0!#q[YF1sM[G7ArhV%fm=QhlQDrY;\8.knn_#mf\&+T<X^>:61ZV_]>BXbTOA<_9f:@"-hLFlD9XQJd'SCVL<JeuZO^)-C[4g98M^5TO/8G@8Ud>CSID$/%YYpk0e<S3t2RD7=F_fZ#YQLH'WtanimT5f(QQgSoWMt5;<-@N`H37d602F#^R@;p;N\NgUS3Rd/jMg<g?%l,>@)Za;9mL*EIl8+s%5T7TL:b#k&dhbTLpJ'E7k+KRo[8afN)lKMPQAl*-1'SM6$X%4]X@=+)U,'AXf$rXedU5;6nL4&90.Qs/0EN!tV\0$4q&Dq5ZD10o%Jmlst?u2%)34WGa=4O#\g=]?"N`J!sM5=3BIS29VJW>;`KeTl]'+SP]fmDnP,bh)@=/*8nnct]7Y!/AOrLI()UcA)k"*&?rm`\&C%TNHpVD(Ljg9f/r#r4I][PVmCuB61epqA9#\m\qH97?UPq,L^q]qO??<g`39XS?skVQCU]S8qefLO?A&Dn]WUBfU<Q_'"q_73,G#k%#lM#'A1J7#@u0TpoTZsrfsZJV\\XDSJ5LSKbuuLk"H(OYj&$Q@]Pl>GG7;;Ai=83B9a1r#Fj^D!21mX*'e6AH'EZ6cdhm_-*99[K%Aq5s!gFY0U;rH'MJQ1VRLPqpLiB*ARa8,&MIfA;%c[YuLdpIRrhP<AaqBn@\^461TmbM5W5.pmgp@@[5YA[2Y^:\i?I=D"al1<Mn%YHRsds7?0ImIeZScYp#5?iK`o^TsA.mc!WkrUe:Z:O`@(1o*n~>%AI9_PrivateDataEnd